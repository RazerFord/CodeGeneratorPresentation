edgeGenMode 1 EdgeGeneratorNaive
            2 EdgeGeneratorScout
type 1 ArrayList
     2 HashSet
     3 HashMap

Path for java installation 'C:\Users\User\.jdks\corretto-17.0.10' (IntelliJ IDEA) does not contain a java executable
> Task :codegenerator:checkKotlinGradlePluginConfigurationErrors
> Task :common:compileJava UP-TO-DATE
> Task :common:processResources NO-SOURCE
> Task :common:classes UP-TO-DATE
> Task :common:jar UP-TO-DATE
> Task :codegenerator:compileKotlin UP-TO-DATE
> Task :codegenerator:compileJava UP-TO-DATE
> Task :codegenerator:processResources NO-SOURCE
> Task :codegenerator:classes UP-TO-DATE
> Task :codegenerator:compileTestKotlin NO-SOURCE
> Task :codegenerator:compileTestJava
> Task :codegenerator:processTestResources UP-TO-DATE
> Task :codegenerator:testClasses
> Task :codegenerator:compileJmhKotlin NO-SOURCE
> Task :codegenerator:compileJmhJava NO-SOURCE
> Task :codegenerator:processJmhResources NO-SOURCE
> Task :codegenerator:jmhClasses UP-TO-DATE

> Task :codegenerator:jmhRunBytecodeGenerator
Processing 0 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\java\jmh with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources
Processing 0 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\kotlin\jmh with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources
Processing 85 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\java\test with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources
Processing 0 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\kotlin\test with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources

> Task :codegenerator:jmhCompileGeneratedClasses
> Task :codegenerator:jmhJar

> Task :codegenerator:jmh
# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 1, type = 1)

# Run progress: 0,00% complete, ETA 01:10:00
# Fork: 1 of 1
# Warmup Iteration   1: Size 60
6,614 ms/op
# Warmup Iteration   2: 6,236 ms/op
# Warmup Iteration   3: 6,185 ms/op
# Warmup Iteration   4: 5,997 ms/op
# Warmup Iteration   5: 6,029 ms/op
# Warmup Iteration   6: 6,174 ms/op
# Warmup Iteration   7: 6,184 ms/op
# Warmup Iteration   8: 6,128 ms/op
# Warmup Iteration   9: 6,063 ms/op
# Warmup Iteration  10: 6,065 ms/op
Iteration   1: 6,099 ms/op
                 ·gc.alloc.rate:      273,241 MB/sec
                 ·gc.alloc.rate.norm: 1747415,463 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   2: 6,084 ms/op
                 ·gc.alloc.rate:      273,879 MB/sec
                 ·gc.alloc.rate.norm: 1747415,436 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            31,000 ms

Iteration   3: 6,056 ms/op
                 ·gc.alloc.rate:      275,180 MB/sec
                 ·gc.alloc.rate.norm: 1747415,391 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   4: 6,090 ms/op
                 ·gc.alloc.rate:      273,625 MB/sec
                 ·gc.alloc.rate.norm: 1747415,436 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            30,000 ms

Iteration   5: 6,036 ms/op
                 ·gc.alloc.rate:      276,096 MB/sec
                 ·gc.alloc.rate.norm: 1747415,373 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            29,000 ms

Iteration   6: 6,069 ms/op
                 ·gc.alloc.rate:      274,646 MB/sec
                 ·gc.alloc.rate.norm: 1747878,245 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            30,000 ms

Iteration   7: 6,041 ms/op
                 ·gc.alloc.rate:      275,827 MB/sec
                 ·gc.alloc.rate.norm: 1747415,391 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   8: 6,095 ms/op
                 ·gc.alloc.rate:      273,407 MB/sec
                 ·gc.alloc.rate.norm: 1747415,445 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   9: 6,069 ms/op
                 ·gc.alloc.rate:      274,577 MB/sec
                 ·gc.alloc.rate.norm: 1747415,418 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms

Iteration  10: 6,033 ms/op
                 ·gc.alloc.rate:      276,208 MB/sec
                 ·gc.alloc.rate.norm: 1747415,403 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            31,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  6,067 ±(99.9%) 0,037 ms/op [Average]
  (min, avg, max) = (6,033, 6,067, 6,099), stdev = 0,025
  CI (99.9%): [6,030, 6,105] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  274,669 ±(99.9%) 1,699 MB/sec [Average]
  (min, avg, max) = (273,241, 274,669, 276,208), stdev = 1,124
  CI (99.9%): [272,970, 276,367] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  1747461,700 ±(99.9%) 221,274 B/op [Average]
  (min, avg, max) = (1747415,373, 1747461,700, 1747878,245), stdev = 146,359
  CI (99.9%): [1747240,427, 1747682,974] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  474,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 47,400, 48,000), stdev = 0,516
  CI (99.9%): [474,000, 474,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  315,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (29,000, 31,500, 34,000), stdev = 1,650
  CI (99.9%): [315,000, 315,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 1, type = 2)

# Run progress: 2,38% complete, ETA 01:08:47
# Fork: 1 of 1
# Warmup Iteration   1: Size 58
6,310 ms/op
# Warmup Iteration   2: 5,963 ms/op
# Warmup Iteration   3: 5,876 ms/op
# Warmup Iteration   4: 5,961 ms/op
# Warmup Iteration   5: 5,957 ms/op
# Warmup Iteration   6: 5,948 ms/op
# Warmup Iteration   7: 5,895 ms/op
# Warmup Iteration   8: 5,937 ms/op
# Warmup Iteration   9: 5,925 ms/op
# Warmup Iteration  10: 5,927 ms/op
Iteration   1: 5,893 ms/op
                 ·gc.alloc.rate:      274,662 MB/sec
                 ·gc.alloc.rate.norm: 1697211,398 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms

Iteration   2: 5,928 ms/op
                 ·gc.alloc.rate:      273,006 MB/sec
                 ·gc.alloc.rate.norm: 1697211,489 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   3: 5,922 ms/op
                 ·gc.alloc.rate:      273,314 MB/sec
                 ·gc.alloc.rate.norm: 1697211,466 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            34,000 ms

Iteration   4: 5,934 ms/op
                 ·gc.alloc.rate:      272,740 MB/sec
                 ·gc.alloc.rate.norm: 1697211,489 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            31,000 ms

Iteration   5: 5,915 ms/op
                 ·gc.alloc.rate:      273,632 MB/sec
                 ·gc.alloc.rate.norm: 1697211,489 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   6: 5,906 ms/op
                 ·gc.alloc.rate:      274,027 MB/sec
                 ·gc.alloc.rate.norm: 1697225,868 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            30,000 ms

Iteration   7: 5,903 ms/op
                 ·gc.alloc.rate:      274,196 MB/sec
                 ·gc.alloc.rate.norm: 1697211,443 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            33,000 ms

Iteration   8: 5,913 ms/op
                 ·gc.alloc.rate:      273,714 MB/sec
                 ·gc.alloc.rate.norm: 1697211,420 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   9: 5,891 ms/op
                 ·gc.alloc.rate:      274,736 MB/sec
                 ·gc.alloc.rate.norm: 1697211,420 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            34,000 ms

Iteration  10: 5,918 ms/op
                 ·gc.alloc.rate:      273,508 MB/sec
                 ·gc.alloc.rate.norm: 1697211,527 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            31,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  5,912 ±(99.9%) 0,021 ms/op [Average]
  (min, avg, max) = (5,891, 5,912, 5,934), stdev = 0,014
  CI (99.9%): [5,891, 5,934] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  273,754 ±(99.9%) 0,997 MB/sec [Average]
  (min, avg, max) = (272,740, 273,754, 274,736), stdev = 0,660
  CI (99.9%): [272,756, 274,751] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  1697212,901 ±(99.9%) 6,888 B/op [Average]
  (min, avg, max) = (1697211,398, 1697212,901, 1697225,868), stdev = 4,556
  CI (99.9%): [1697206,013, 1697219,790] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  473,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 47,300, 48,000), stdev = 0,483
  CI (99.9%): [473,000, 473,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  322,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (30,000, 32,200, 34,000), stdev = 1,317
  CI (99.9%): [322,000, 322,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 1, type = 3)

# Run progress: 4,76% complete, ETA 01:07:06
# Fork: 1 of 1
# Warmup Iteration   1: Size 1299
143,146 ms/op
# Warmup Iteration   2: 132,240 ms/op
# Warmup Iteration   3: 132,277 ms/op
# Warmup Iteration   4: 131,618 ms/op
# Warmup Iteration   5: 131,239 ms/op
# Warmup Iteration   6: 131,423 ms/op
# Warmup Iteration   7: 131,846 ms/op
# Warmup Iteration   8: 132,104 ms/op
# Warmup Iteration   9: 132,214 ms/op
# Warmup Iteration  10: 132,721 ms/op
Iteration   1: 132,071 ms/op
                 ·gc.alloc.rate:      272,742 MB/sec
                 ·gc.alloc.rate.norm: 37772840,000 B/op
                 ·gc.count:           34,000 counts
                 ·gc.time:            46,000 ms

Iteration   2: 132,372 ms/op
                 ·gc.alloc.rate:      272,136 MB/sec
                 ·gc.alloc.rate.norm: 37774448,000 B/op
                 ·gc.count:           33,000 counts
                 ·gc.time:            45,000 ms

Iteration   3: 132,408 ms/op
                 ·gc.alloc.rate:      272,046 MB/sec
                 ·gc.alloc.rate.norm: 37772220,211 B/op
                 ·gc.count:           37,000 counts
                 ·gc.time:            50,000 ms

Iteration   4: 131,266 ms/op
                 ·gc.alloc.rate:      274,397 MB/sec
                 ·gc.alloc.rate.norm: 37771817,231 B/op
                 ·gc.count:           30,000 counts
                 ·gc.time:            50,000 ms

Iteration   5: 169,239 ms/op
                 ·gc.alloc.rate:      212,838 MB/sec
                 ·gc.alloc.rate.norm: 37771598,400 B/op
                 ·gc.count:           27,000 counts
                 ·gc.time:            40,000 ms

Iteration   6: 181,493 ms/op
                 ·gc.alloc.rate:      198,460 MB/sec
                 ·gc.alloc.rate.norm: 37772947,143 B/op
                 ·gc.count:           33,000 counts
                 ·gc.time:            46,000 ms

Iteration   7: 152,508 ms/op
                 ·gc.alloc.rate:      236,194 MB/sec
                 ·gc.alloc.rate.norm: 37772848,970 B/op
                 ·gc.count:           31,000 counts
                 ·gc.time:            37,000 ms

Iteration   8: 149,211 ms/op
                 ·gc.alloc.rate:      241,408 MB/sec
                 ·gc.alloc.rate.norm: 37772152,000 B/op
                 ·gc.count:           33,000 counts
                 ·gc.time:            42,000 ms

Iteration   9: 164,612 ms/op
                 ·gc.alloc.rate:      218,824 MB/sec
                 ·gc.alloc.rate.norm: 37772451,613 B/op
                 ·gc.count:           34,000 counts
                 ·gc.time:            41,000 ms

Iteration  10: 150,708 ms/op
                 ·gc.alloc.rate:      239,015 MB/sec
                 ·gc.alloc.rate.norm: 37772839,059 B/op
                 ·gc.count:           32,000 counts
                 ·gc.time:            40,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  149,589 ±(99.9%) 27,015 ms/op [Average]
  (min, avg, max) = (131,266, 149,589, 181,493), stdev = 17,869
  CI (99.9%): [122,573, 176,604] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  243,806 ±(99.9%) 42,461 MB/sec [Average]
  (min, avg, max) = (198,460, 243,806, 274,397), stdev = 28,086
  CI (99.9%): [201,345, 286,268] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  37772616,263 ±(99.9%) 1202,388 B/op [Average]
  (min, avg, max) = (37771598,400, 37772616,263, 37774448,000), stdev = 795,305
  CI (99.9%): [37771413,874, 37773818,651] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  324,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (27,000, 32,400, 37,000), stdev = 2,675
  CI (99.9%): [324,000, 324,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  437,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (37,000, 43,700, 50,000), stdev = 4,398
  CI (99.9%): [437,000, 437,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 2, type = 1)

# Run progress: 7,14% complete, ETA 01:05:40
# Fork: 1 of 1
# Warmup Iteration   1: Size 68
8,507 ms/op
# Warmup Iteration   2: 8,562 ms/op
# Warmup Iteration   3: 7,944 ms/op
# Warmup Iteration   4: 7,241 ms/op
# Warmup Iteration   5: 7,105 ms/op
# Warmup Iteration   6: 7,231 ms/op
# Warmup Iteration   7: 7,136 ms/op
# Warmup Iteration   8: 7,037 ms/op
# Warmup Iteration   9: 6,964 ms/op
# Warmup Iteration  10: 6,879 ms/op
Iteration   1: 6,813 ms/op
                 ·gc.alloc.rate:      276,948 MB/sec
                 ·gc.alloc.rate.norm: 1978520,489 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   2: 6,896 ms/op
                 ·gc.alloc.rate:      273,602 MB/sec
                 ·gc.alloc.rate.norm: 1978520,594 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            28,000 ms

Iteration   3: 6,833 ms/op
                 ·gc.alloc.rate:      276,143 MB/sec
                 ·gc.alloc.rate.norm: 1978520,512 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   4: 7,038 ms/op
                 ·gc.alloc.rate:      268,075 MB/sec
                 ·gc.alloc.rate.norm: 1978520,775 B/op
                 ·gc.count:           46,000 counts
                 ·gc.time:            28,000 ms

Iteration   5: 6,881 ms/op
                 ·gc.alloc.rate:      274,163 MB/sec
                 ·gc.alloc.rate.norm: 1978520,638 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            29,000 ms

Iteration   6: 6,898 ms/op
                 ·gc.alloc.rate:      273,514 MB/sec
                 ·gc.alloc.rate.norm: 1978537,455 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            29,000 ms

Iteration   7: 6,808 ms/op
                 ·gc.alloc.rate:      277,145 MB/sec
                 ·gc.alloc.rate.norm: 1978520,478 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   8: 6,835 ms/op
                 ·gc.alloc.rate:      276,048 MB/sec
                 ·gc.alloc.rate.norm: 1978520,512 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            34,000 ms

Iteration   9: 6,700 ms/op
                 ·gc.alloc.rate:      281,609 MB/sec
                 ·gc.alloc.rate.norm: 1978520,396 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration  10: 6,754 ms/op
                 ·gc.alloc.rate:      279,302 MB/sec
                 ·gc.alloc.rate.norm: 1978520,409 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  6,846 ±(99.9%) 0,139 ms/op [Average]
  (min, avg, max) = (6,700, 6,846, 7,038), stdev = 0,092
  CI (99.9%): [6,707, 6,985] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  275,655 ±(99.9%) 5,555 MB/sec [Average]
  (min, avg, max) = (268,075, 275,655, 281,609), stdev = 3,674
  CI (99.9%): [270,100, 281,210] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  1978522,226 ±(99.9%) 8,091 B/op [Average]
  (min, avg, max) = (1978520,396, 1978522,226, 1978537,455), stdev = 5,352
  CI (99.9%): [1978514,134, 1978530,317] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  477,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (46,000, 47,700, 49,000), stdev = 0,949
  CI (99.9%): [477,000, 477,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  321,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (28,000, 32,100, 37,000), stdev = 3,348
  CI (99.9%): [321,000, 321,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 2, type = 2)

# Run progress: 9,52% complete, ETA 01:03:56
# Fork: 1 of 1
# Warmup Iteration   1: Size 66
6,976 ms/op
# Warmup Iteration   2: 6,604 ms/op
# Warmup Iteration   3: 6,584 ms/op
# Warmup Iteration   4: 6,527 ms/op
# Warmup Iteration   5: 6,536 ms/op
# Warmup Iteration   6: 6,556 ms/op
# Warmup Iteration   7: 6,544 ms/op
# Warmup Iteration   8: 6,526 ms/op
# Warmup Iteration   9: 6,574 ms/op
# Warmup Iteration  10: 6,556 ms/op
Iteration   1: 6,561 ms/op
                 ·gc.alloc.rate:      278,998 MB/sec
                 ·gc.alloc.rate.norm: 1919583,696 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   2: 6,515 ms/op
                 ·gc.alloc.rate:      280,959 MB/sec
                 ·gc.alloc.rate.norm: 1919583,512 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   3: 6,491 ms/op
                 ·gc.alloc.rate:      282,034 MB/sec
                 ·gc.alloc.rate.norm: 1919583,420 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms

Iteration   4: 6,524 ms/op
                 ·gc.alloc.rate:      280,592 MB/sec
                 ·gc.alloc.rate.norm: 1919583,573 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   5: 6,560 ms/op
                 ·gc.alloc.rate:      279,061 MB/sec
                 ·gc.alloc.rate.norm: 1919583,696 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            35,000 ms

Iteration   6: 6,539 ms/op
                 ·gc.alloc.rate:      279,923 MB/sec
                 ·gc.alloc.rate.norm: 1919599,655 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            36,000 ms

Iteration   7: 6,490 ms/op
                 ·gc.alloc.rate:      282,043 MB/sec
                 ·gc.alloc.rate.norm: 1919583,451 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            39,000 ms

Iteration   8: 6,459 ms/op
                 ·gc.alloc.rate:      283,430 MB/sec
                 ·gc.alloc.rate.norm: 1919583,330 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   9: 6,495 ms/op
                 ·gc.alloc.rate:      281,847 MB/sec
                 ·gc.alloc.rate.norm: 1919583,451 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration  10: 6,490 ms/op
                 ·gc.alloc.rate:      282,059 MB/sec
                 ·gc.alloc.rate.norm: 1919583,492 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  6,513 ±(99.9%) 0,051 ms/op [Average]
  (min, avg, max) = (6,459, 6,513, 6,561), stdev = 0,034
  CI (99.9%): [6,462, 6,563] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  281,094 ±(99.9%) 2,191 MB/sec [Average]
  (min, avg, max) = (278,998, 281,094, 283,430), stdev = 1,449
  CI (99.9%): [278,903, 283,286] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  1919585,128 ±(99.9%) 7,719 B/op [Average]
  (min, avg, max) = (1919583,330, 1919585,128, 1919599,655), stdev = 5,106
  CI (99.9%): [1919577,409, 1919592,847] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  486,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (48,000, 48,600, 49,000), stdev = 0,516
  CI (99.9%): [486,000, 486,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  356,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (33,000, 35,600, 39,000), stdev = 2,119
  CI (99.9%): [356,000, 356,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 2, type = 3)

# Run progress: 11,90% complete, ETA 01:02:13
# Fork: 1 of 1
# Warmup Iteration   1: Size 2700
283,598 ms/op
# Warmup Iteration   2: 266,070 ms/op
# Warmup Iteration   3: 266,570 ms/op
# Warmup Iteration   4: 266,794 ms/op
# Warmup Iteration   5: 266,807 ms/op
# Warmup Iteration   6: 266,335 ms/op
# Warmup Iteration   7: 267,907 ms/op
# Warmup Iteration   8: 266,411 ms/op
# Warmup Iteration   9: 267,875 ms/op
# Warmup Iteration  10: 267,852 ms/op
Iteration   1: 269,064 ms/op
                 ·gc.alloc.rate:      276,382 MB/sec
                 ·gc.alloc.rate.norm: 77982649,263 B/op
                 ·gc.count:           19,000 counts
                 ·gc.time:            41,000 ms

Iteration   2: 266,449 ms/op
                 ·gc.alloc.rate:      279,106 MB/sec
                 ·gc.alloc.rate.norm: 77982625,263 B/op
                 ·gc.count:           19,000 counts
                 ·gc.time:            45,000 ms

Iteration   3: 266,562 ms/op
                 ·gc.alloc.rate:      278,978 MB/sec
                 ·gc.alloc.rate.norm: 77983119,579 B/op
                 ·gc.count:           17,000 counts
                 ·gc.time:            39,000 ms

Iteration   4: 266,309 ms/op
                 ·gc.alloc.rate:      279,257 MB/sec
                 ·gc.alloc.rate.norm: 77984618,947 B/op
                 ·gc.count:           18,000 counts
                 ·gc.time:            50,000 ms

Iteration   5: 264,231 ms/op
                 ·gc.alloc.rate:      281,446 MB/sec
                 ·gc.alloc.rate.norm: 77981809,263 B/op
                 ·gc.count:           19,000 counts
                 ·gc.time:            44,000 ms

Iteration   6: 266,811 ms/op
                 ·gc.alloc.rate:      278,725 MB/sec
                 ·gc.alloc.rate.norm: 77984589,053 B/op
                 ·gc.count:           18,000 counts
                 ·gc.time:            47,000 ms

Iteration   7: 265,096 ms/op
                 ·gc.alloc.rate:      280,526 MB/sec
                 ·gc.alloc.rate.norm: 77981170,947 B/op
                 ·gc.count:           17,000 counts
                 ·gc.time:            43,000 ms

Iteration   8: 264,312 ms/op
                 ·gc.alloc.rate:      281,360 MB/sec
                 ·gc.alloc.rate.norm: 77983035,600 B/op
                 ·gc.count:           22,000 counts
                 ·gc.time:            49,000 ms

Iteration   9: 263,608 ms/op
                 ·gc.alloc.rate:      282,110 MB/sec
                 ·gc.alloc.rate.norm: 77981649,263 B/op
                 ·gc.count:           18,000 counts
                 ·gc.time:            46,000 ms

Iteration  10: 263,949 ms/op
                 ·gc.alloc.rate:      281,754 MB/sec
                 ·gc.alloc.rate.norm: 77983497,263 B/op
                 ·gc.count:           20,000 counts
                 ·gc.time:            47,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  265,639 ±(99.9%) 2,574 ms/op [Average]
  (min, avg, max) = (263,608, 265,639, 269,064), stdev = 1,702
  CI (99.9%): [263,065, 268,213] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  279,964 ±(99.9%) 2,706 MB/sec [Average]
  (min, avg, max) = (276,382, 279,964, 282,110), stdev = 1,790
  CI (99.9%): [277,258, 282,671] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  77982876,444 ±(99.9%) 1753,543 B/op [Average]
  (min, avg, max) = (77981170,947, 77982876,444, 77984618,947), stdev = 1159,860
  CI (99.9%): [77981122,901, 77984629,987] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  187,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (17,000, 18,700, 22,000), stdev = 1,494
  CI (99.9%): [187,000, 187,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  451,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (39,000, 45,100, 50,000), stdev = 3,446
  CI (99.9%): [451,000, 451,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 3, type = 1)

# Run progress: 14,29% complete, ETA 01:00:38
# Fork: 1 of 1
# Warmup Iteration   1: Size 76
8,028 ms/op
# Warmup Iteration   2: 7,765 ms/op
# Warmup Iteration   3: 7,788 ms/op
# Warmup Iteration   4: 7,988 ms/op
# Warmup Iteration   5: 8,147 ms/op
# Warmup Iteration   6: 11,010 ms/op
# Warmup Iteration   7: 7,989 ms/op
# Warmup Iteration   8: 7,786 ms/op
# Warmup Iteration   9: 7,827 ms/op
# Warmup Iteration  10: 7,622 ms/op
Iteration   1: 7,679 ms/op
                 ·gc.alloc.rate:      274,501 MB/sec
                 ·gc.alloc.rate.norm: 2210521,776 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            34,000 ms

Iteration   2: 7,657 ms/op
                 ·gc.alloc.rate:      275,294 MB/sec
                 ·gc.alloc.rate.norm: 2210521,747 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            36,000 ms

Iteration   3: 7,763 ms/op
                 ·gc.alloc.rate:      271,551 MB/sec
                 ·gc.alloc.rate.norm: 2210521,898 B/op
                 ·gc.count:           46,000 counts
                 ·gc.time:            36,000 ms

Iteration   4: 7,643 ms/op
                 ·gc.alloc.rate:      275,819 MB/sec
                 ·gc.alloc.rate.norm: 2210521,732 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            38,000 ms

Iteration   5: 7,639 ms/op
                 ·gc.alloc.rate:      275,950 MB/sec
                 ·gc.alloc.rate.norm: 2210521,747 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            37,000 ms

Iteration   6: 7,633 ms/op
                 ·gc.alloc.rate:      276,237 MB/sec
                 ·gc.alloc.rate.norm: 2210988,249 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   7: 7,509 ms/op
                 ·gc.alloc.rate:      280,727 MB/sec
                 ·gc.alloc.rate.norm: 2210521,571 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            35,000 ms

Iteration   8: 7,573 ms/op
                 ·gc.alloc.rate:      278,354 MB/sec
                 ·gc.alloc.rate.norm: 2210521,658 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   9: 7,570 ms/op
                 ·gc.alloc.rate:      278,514 MB/sec
                 ·gc.alloc.rate.norm: 2210969,644 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration  10: 7,528 ms/op
                 ·gc.alloc.rate:      280,070 MB/sec
                 ·gc.alloc.rate.norm: 2210969,586 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            33,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  7,619 ±(99.9%) 0,115 ms/op [Average]
  (min, avg, max) = (7,509, 7,619, 7,763), stdev = 0,076
  CI (99.9%): [7,505, 7,734] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  276,702 ±(99.9%) 4,170 MB/sec [Average]
  (min, avg, max) = (271,551, 276,702, 280,727), stdev = 2,758
  CI (99.9%): [272,531, 280,872] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2210657,961 ±(99.9%) 331,711 B/op [Average]
  (min, avg, max) = (2210521,571, 2210657,961, 2210988,249), stdev = 219,407
  CI (99.9%): [2210326,249, 2210989,672] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  477,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (46,000, 47,700, 49,000), stdev = 0,949
  CI (99.9%): [477,000, 477,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  347,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (32,000, 34,700, 38,000), stdev = 2,003
  CI (99.9%): [347,000, 347,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 3, type = 2)

# Run progress: 16,67% complete, ETA 00:58:55
# Fork: 1 of 1
# Warmup Iteration   1: Size 74
7,720 ms/op
# Warmup Iteration   2: 7,349 ms/op
# Warmup Iteration   3: 7,418 ms/op
# Warmup Iteration   4: 7,368 ms/op
# Warmup Iteration   5: 7,387 ms/op
# Warmup Iteration   6: 7,373 ms/op
# Warmup Iteration   7: 7,407 ms/op
# Warmup Iteration   8: 7,372 ms/op
# Warmup Iteration   9: 7,433 ms/op
# Warmup Iteration  10: 7,365 ms/op
Iteration   1: 7,424 ms/op
                 ·gc.alloc.rate:      276,457 MB/sec
                 ·gc.alloc.rate.norm: 2152133,310 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            37,000 ms

Iteration   2: 7,398 ms/op
                 ·gc.alloc.rate:      277,404 MB/sec
                 ·gc.alloc.rate.norm: 2152133,314 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   3: 7,434 ms/op
                 ·gc.alloc.rate:      276,086 MB/sec
                 ·gc.alloc.rate.norm: 2152133,353 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            33,000 ms

Iteration   4: 7,331 ms/op
                 ·gc.alloc.rate:      279,975 MB/sec
                 ·gc.alloc.rate.norm: 2152132,966 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            33,000 ms

Iteration   5: 7,369 ms/op
                 ·gc.alloc.rate:      278,503 MB/sec
                 ·gc.alloc.rate.norm: 2152133,094 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   6: 7,368 ms/op
                 ·gc.alloc.rate:      278,551 MB/sec
                 ·gc.alloc.rate.norm: 2152151,013 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   7: 7,343 ms/op
                 ·gc.alloc.rate:      279,486 MB/sec
                 ·gc.alloc.rate.norm: 2152133,009 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            36,000 ms

Iteration   8: 7,377 ms/op
                 ·gc.alloc.rate:      278,227 MB/sec
                 ·gc.alloc.rate.norm: 2152133,184 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   9: 7,364 ms/op
                 ·gc.alloc.rate:      278,713 MB/sec
                 ·gc.alloc.rate.norm: 2152133,051 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            30,000 ms

Iteration  10: 7,333 ms/op
                 ·gc.alloc.rate:      279,901 MB/sec
                 ·gc.alloc.rate.norm: 2152132,924 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  7,374 ±(99.9%) 0,054 ms/op [Average]
  (min, avg, max) = (7,331, 7,374, 7,434), stdev = 0,036
  CI (99.9%): [7,320, 7,428] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  278,330 ±(99.9%) 2,025 MB/sec [Average]
  (min, avg, max) = (276,086, 278,330, 279,975), stdev = 1,340
  CI (99.9%): [276,305, 280,356] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2152134,922 ±(99.9%) 8,551 B/op [Average]
  (min, avg, max) = (2152132,924, 2152134,922, 2152151,013), stdev = 5,656
  CI (99.9%): [2152126,371, 2152143,473] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  481,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 48,100, 49,000), stdev = 0,568
  CI (99.9%): [481,000, 481,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  345,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (30,000, 34,500, 38,000), stdev = 2,273
  CI (99.9%): [345,000, 345,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 3, type = 3)

# Run progress: 19,05% complete, ETA 00:57:12
# Fork: 1 of 1
# Warmup Iteration   1: Size 4857
534,586 ms/op
# Warmup Iteration   2: 477,576 ms/op
# Warmup Iteration   3: 479,058 ms/op
# Warmup Iteration   4: 482,068 ms/op
# Warmup Iteration   5: 480,476 ms/op
# Warmup Iteration   6: 482,656 ms/op
# Warmup Iteration   7: 485,103 ms/op
# Warmup Iteration   8: 485,090 ms/op
# Warmup Iteration   9: 485,103 ms/op
# Warmup Iteration  10: 479,710 ms/op
Iteration   1: 478,830 ms/op
                 ·gc.alloc.rate:      280,686 MB/sec
                 ·gc.alloc.rate.norm: 140941677,091 B/op
                 ·gc.count:           13,000 counts
                 ·gc.time:            54,000 ms

Iteration   2: 480,901 ms/op
                 ·gc.alloc.rate:      279,486 MB/sec
                 ·gc.alloc.rate.norm: 140940096,000 B/op
                 ·gc.count:           12,000 counts
                 ·gc.time:            44,000 ms

Iteration   3: 484,641 ms/op
                 ·gc.alloc.rate:      277,333 MB/sec
                 ·gc.alloc.rate.norm: 140939760,000 B/op
                 ·gc.count:           12,000 counts
                 ·gc.time:            56,000 ms

Iteration   4: 483,347 ms/op
                 ·gc.alloc.rate:      278,074 MB/sec
                 ·gc.alloc.rate.norm: 140941538,909 B/op
                 ·gc.count:           13,000 counts
                 ·gc.time:            51,000 ms

Iteration   5: 488,117 ms/op
                 ·gc.alloc.rate:      275,355 MB/sec
                 ·gc.alloc.rate.norm: 140938688,000 B/op
                 ·gc.count:           13,000 counts
                 ·gc.time:            69,000 ms

Iteration   6: 483,471 ms/op
                 ·gc.alloc.rate:      277,990 MB/sec
                 ·gc.alloc.rate.norm: 140939397,091 B/op
                 ·gc.count:           14,000 counts
                 ·gc.time:            56,000 ms

Iteration   7: 481,178 ms/op
                 ·gc.alloc.rate:      279,315 MB/sec
                 ·gc.alloc.rate.norm: 140942320,000 B/op
                 ·gc.count:           13,000 counts
                 ·gc.time:            46,000 ms

Iteration   8: 486,840 ms/op
                 ·gc.alloc.rate:      276,075 MB/sec
                 ·gc.alloc.rate.norm: 140940165,091 B/op
                 ·gc.count:           14,000 counts
                 ·gc.time:            70,000 ms

Iteration   9: 486,409 ms/op
                 ·gc.alloc.rate:      276,326 MB/sec
                 ·gc.alloc.rate.norm: 140940437,091 B/op
                 ·gc.count:           12,000 counts
                 ·gc.time:            46,000 ms

Iteration  10: 484,214 ms/op
                 ·gc.alloc.rate:      277,582 MB/sec
                 ·gc.alloc.rate.norm: 140942285,091 B/op
                 ·gc.count:           13,000 counts
                 ·gc.time:            48,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  483,795 ±(99.9%) 4,389 ms/op [Average]
  (min, avg, max) = (478,830, 483,795, 488,117), stdev = 2,903
  CI (99.9%): [479,406, 488,184] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  277,822 ±(99.9%) 2,518 MB/sec [Average]
  (min, avg, max) = (275,355, 277,822, 280,686), stdev = 1,666
  CI (99.9%): [275,304, 280,340] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  140940636,436 ±(99.9%) 1892,633 B/op [Average]
  (min, avg, max) = (140938688,000, 140940636,436, 140942320,000), stdev = 1251,859
  CI (99.9%): [140938743,804, 140942529,069] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  129,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (12,000, 12,900, 14,000), stdev = 0,738
  CI (99.9%): [129,000, 129,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  540,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (44,000, 54,000, 70,000), stdev = 9,201
  CI (99.9%): [540,000, 540,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 4, type = 1)

# Run progress: 21,43% complete, ETA 00:55:52
# Fork: 1 of 1
# Warmup Iteration   1: Size 84
8,869 ms/op
# Warmup Iteration   2: 8,362 ms/op
# Warmup Iteration   3: 8,315 ms/op
# Warmup Iteration   4: 8,554 ms/op
# Warmup Iteration   5: 8,655 ms/op
# Warmup Iteration   6: 8,607 ms/op
# Warmup Iteration   7: 8,489 ms/op
# Warmup Iteration   8: 8,369 ms/op
# Warmup Iteration   9: 8,507 ms/op
# Warmup Iteration  10: 8,411 ms/op
Iteration   1: 8,367 ms/op
                 ·gc.alloc.rate:      278,303 MB/sec
                 ·gc.alloc.rate.norm: 2441626,853 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            36,000 ms

Iteration   2: 8,387 ms/op
                 ·gc.alloc.rate:      277,634 MB/sec
                 ·gc.alloc.rate.norm: 2441627,243 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   3: 8,443 ms/op
                 ·gc.alloc.rate:      275,796 MB/sec
                 ·gc.alloc.rate.norm: 2441626,981 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   4: 8,351 ms/op
                 ·gc.alloc.rate:      278,806 MB/sec
                 ·gc.alloc.rate.norm: 2441626,871 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   5: 8,367 ms/op
                 ·gc.alloc.rate:      278,283 MB/sec
                 ·gc.alloc.rate.norm: 2441626,871 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            38,000 ms

Iteration   6: 8,372 ms/op
                 ·gc.alloc.rate:      278,098 MB/sec
                 ·gc.alloc.rate.norm: 2441647,344 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   7: 8,585 ms/op
                 ·gc.alloc.rate:      271,228 MB/sec
                 ·gc.alloc.rate.norm: 2441627,151 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            27,000 ms

Iteration   8: 8,718 ms/op
                 ·gc.alloc.rate:      267,067 MB/sec
                 ·gc.alloc.rate.norm: 2441627,325 B/op
                 ·gc.count:           46,000 counts
                 ·gc.time:            24,000 ms

Iteration   9: 8,668 ms/op
                 ·gc.alloc.rate:      268,637 MB/sec
                 ·gc.alloc.rate.norm: 2441627,247 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            24,000 ms

Iteration  10: 8,676 ms/op
                 ·gc.alloc.rate:      268,390 MB/sec
                 ·gc.alloc.rate.norm: 2441627,286 B/op
                 ·gc.count:           46,000 counts
                 ·gc.time:            24,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  8,493 ±(99.9%) 0,227 ms/op [Average]
  (min, avg, max) = (8,351, 8,493, 8,718), stdev = 0,150
  CI (99.9%): [8,266, 8,721] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  274,224 ±(99.9%) 7,280 MB/sec [Average]
  (min, avg, max) = (267,067, 274,224, 278,806), stdev = 4,815
  CI (99.9%): [266,945, 281,504] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2441629,117 ±(99.9%) 9,687 B/op [Average]
  (min, avg, max) = (2441626,853, 2441629,117, 2441647,344), stdev = 6,407
  CI (99.9%): [2441619,431, 2441638,804] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  474,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (46,000, 47,400, 48,000), stdev = 0,843
  CI (99.9%): [474,000, 474,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  312,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (24,000, 31,200, 38,000), stdev = 5,712
  CI (99.9%): [312,000, 312,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 4, type = 2)

# Run progress: 23,81% complete, ETA 00:54:07
# Fork: 1 of 1
# Warmup Iteration   1: Size 82
9,135 ms/op
# Warmup Iteration   2: 8,632 ms/op
# Warmup Iteration   3: 8,540 ms/op
# Warmup Iteration   4: 8,565 ms/op
# Warmup Iteration   5: 8,674 ms/op
# Warmup Iteration   6: 8,616 ms/op
# Warmup Iteration   7: 8,522 ms/op
# Warmup Iteration   8: 8,658 ms/op
# Warmup Iteration   9: 8,346 ms/op
# Warmup Iteration  10: 8,250 ms/op
Iteration   1: 8,172 ms/op
                 ·gc.alloc.rate:      278,264 MB/sec
                 ·gc.alloc.rate.norm: 2384443,419 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            31,000 ms

Iteration   2: 8,200 ms/op
                 ·gc.alloc.rate:      277,315 MB/sec
                 ·gc.alloc.rate.norm: 2384443,752 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   3: 8,265 ms/op
                 ·gc.alloc.rate:      275,126 MB/sec
                 ·gc.alloc.rate.norm: 2384443,776 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            31,000 ms

Iteration   4: 8,134 ms/op
                 ·gc.alloc.rate:      279,570 MB/sec
                 ·gc.alloc.rate.norm: 2384443,138 B/op
                 ·gc.count:           44,000 counts
                 ·gc.time:            37,000 ms

Iteration   5: 8,202 ms/op
                 ·gc.alloc.rate:      277,230 MB/sec
                 ·gc.alloc.rate.norm: 2384443,483 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   6: 8,204 ms/op
                 ·gc.alloc.rate:      277,149 MB/sec
                 ·gc.alloc.rate.norm: 2384463,412 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   7: 8,078 ms/op
                 ·gc.alloc.rate:      281,479 MB/sec
                 ·gc.alloc.rate.norm: 2384442,911 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms

Iteration   8: 8,166 ms/op
                 ·gc.alloc.rate:      278,452 MB/sec
                 ·gc.alloc.rate.norm: 2384443,362 B/op
                 ·gc.count:           44,000 counts
                 ·gc.time:            32,000 ms

Iteration   9: 8,136 ms/op
                 ·gc.alloc.rate:      279,503 MB/sec
                 ·gc.alloc.rate.norm: 2384443,138 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            33,000 ms

Iteration  10: 8,178 ms/op
                 ·gc.alloc.rate:      278,060 MB/sec
                 ·gc.alloc.rate.norm: 2384443,425 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  8,173 ±(99.9%) 0,076 ms/op [Average]
  (min, avg, max) = (8,078, 8,173, 8,265), stdev = 0,051
  CI (99.9%): [8,097, 8,250] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  278,215 ±(99.9%) 2,604 MB/sec [Average]
  (min, avg, max) = (275,126, 278,215, 281,479), stdev = 1,722
  CI (99.9%): [275,611, 280,818] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2384445,381 ±(99.9%) 9,586 B/op [Average]
  (min, avg, max) = (2384442,911, 2384445,381, 2384463,412), stdev = 6,341
  CI (99.9%): [2384435,795, 2384454,968] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  474,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (44,000, 47,400, 49,000), stdev = 1,838
  CI (99.9%): [474,000, 474,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  339,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (31,000, 33,900, 38,000), stdev = 2,470
  CI (99.9%): [339,000, 339,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 4, type = 3)

# Run progress: 26,19% complete, ETA 00:52:24
# Fork: 1 of 1
# Warmup Iteration   1: Size 7932
865,374 ms/op
# Warmup Iteration   2: 776,466 ms/op
# Warmup Iteration   3: 772,600 ms/op
# Warmup Iteration   4: 778,622 ms/op
# Warmup Iteration   5: 772,772 ms/op
# Warmup Iteration   6: 786,693 ms/op
# Warmup Iteration   7: 781,669 ms/op
# Warmup Iteration   8: 783,157 ms/op
# Warmup Iteration   9: 785,352 ms/op
# Warmup Iteration  10: 785,690 ms/op
Iteration   1: 791,568 ms/op
                 ·gc.alloc.rate:      275,885 MB/sec
                 ·gc.alloc.rate.norm: 228996795,429 B/op
                 ·gc.count:           10,000 counts
                 ·gc.time:            93,000 ms

Iteration   2: 779,839 ms/op
                 ·gc.alloc.rate:      280,036 MB/sec
                 ·gc.alloc.rate.norm: 228998822,857 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            55,000 ms

Iteration   3: 782,803 ms/op
                 ·gc.alloc.rate:      278,974 MB/sec
                 ·gc.alloc.rate.norm: 228999816,000 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            22,000 ms

Iteration   4: 783,841 ms/op
                 ·gc.alloc.rate:      278,609 MB/sec
                 ·gc.alloc.rate.norm: 228998704,000 B/op
                 ·gc.count:           9,000 counts
                 ·gc.time:            52,000 ms

Iteration   5: 782,947 ms/op
                 ·gc.alloc.rate:      278,920 MB/sec
                 ·gc.alloc.rate.norm: 228995675,429 B/op
                 ·gc.count:           10,000 counts
                 ·gc.time:            87,000 ms

Iteration   6: 772,986 ms/op
                 ·gc.alloc.rate:      282,483 MB/sec
                 ·gc.alloc.rate.norm: 228998822,857 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            34,000 ms

Iteration   7: 772,955 ms/op
                 ·gc.alloc.rate:      282,526 MB/sec
                 ·gc.alloc.rate.norm: 228996128,000 B/op
                 ·gc.count:           7,000 counts
                 ·gc.time:            46,000 ms

Iteration   8: 797,447 ms/op
                 ·gc.alloc.rate:      273,850 MB/sec
                 ·gc.alloc.rate.norm: 228995992,000 B/op
                 ·gc.count:           10,000 counts
                 ·gc.time:            109,000 ms

Iteration   9: 788,384 ms/op
                 ·gc.alloc.rate:      277,001 MB/sec
                 ·gc.alloc.rate.norm: 228999824,000 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            32,000 ms

Iteration  10: 783,309 ms/op
                 ·gc.alloc.rate:      278,790 MB/sec
                 ·gc.alloc.rate.norm: 228998643,429 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            55,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  783,608 ±(99.9%) 11,486 ms/op [Average]
  (min, avg, max) = (772,955, 783,608, 797,447), stdev = 7,597
  CI (99.9%): [772,122, 795,094] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  278,708 ±(99.9%) 4,069 MB/sec [Average]
  (min, avg, max) = (273,850, 278,708, 282,526), stdev = 2,692
  CI (99.9%): [274,638, 282,777] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  228997922,400 ±(99.9%) 2428,376 B/op [Average]
  (min, avg, max) = (228995675,429, 228997922,400, 228999824,000), stdev = 1606,220
  CI (99.9%): [228995494,024, 229000350,776] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  80,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (6,000, 8,000, 10,000), stdev = 1,700
  CI (99.9%): [80,000, 80,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  585,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (22,000, 58,500, 109,000), stdev = 28,695
  CI (99.9%): [585,000, 585,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 5, type = 1)

# Run progress: 28,57% complete, ETA 00:51:03
# Fork: 1 of 1
# Warmup Iteration   1: Size 92
9,644 ms/op
# Warmup Iteration   2: 9,153 ms/op
# Warmup Iteration   3: 9,137 ms/op
# Warmup Iteration   4: 9,192 ms/op
# Warmup Iteration   5: 9,123 ms/op
# Warmup Iteration   6: 9,106 ms/op
# Warmup Iteration   7: 9,201 ms/op
# Warmup Iteration   8: 9,106 ms/op
# Warmup Iteration   9: 9,093 ms/op
# Warmup Iteration  10: 9,146 ms/op
Iteration   1: 9,122 ms/op
                 ·gc.alloc.rate:      279,449 MB/sec
                 ·gc.alloc.rate.norm: 2673165,571 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   2: 9,035 ms/op
                 ·gc.alloc.rate:      282,119 MB/sec
                 ·gc.alloc.rate.norm: 2672715,978 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms

Iteration   3: 9,264 ms/op
                 ·gc.alloc.rate:      275,123 MB/sec
                 ·gc.alloc.rate.norm: 2672716,681 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   4: 9,296 ms/op
                 ·gc.alloc.rate:      274,193 MB/sec
                 ·gc.alloc.rate.norm: 2672716,334 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            31,000 ms

Iteration   5: 9,060 ms/op
                 ·gc.alloc.rate:      281,370 MB/sec
                 ·gc.alloc.rate.norm: 2673164,022 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            35,000 ms

Iteration   6: 9,084 ms/op
                 ·gc.alloc.rate:      280,559 MB/sec
                 ·gc.alloc.rate.norm: 2672738,203 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            39,000 ms

Iteration   7: 9,059 ms/op
                 ·gc.alloc.rate:      281,391 MB/sec
                 ·gc.alloc.rate.norm: 2673164,000 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   8: 9,089 ms/op
                 ·gc.alloc.rate:      280,431 MB/sec
                 ·gc.alloc.rate.norm: 2672716,043 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            35,000 ms

Iteration   9: 9,012 ms/op
                 ·gc.alloc.rate:      282,820 MB/sec
                 ·gc.alloc.rate.norm: 2672715,993 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            35,000 ms

Iteration  10: 9,085 ms/op
                 ·gc.alloc.rate:      280,565 MB/sec
                 ·gc.alloc.rate.norm: 2672716,065 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  9,111 ±(99.9%) 0,143 ms/op [Average]
  (min, avg, max) = (9,012, 9,111, 9,296), stdev = 0,095
  CI (99.9%): [8,968, 9,254] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  279,802 ±(99.9%) 4,349 MB/sec [Average]
  (min, avg, max) = (274,193, 279,802, 282,820), stdev = 2,877
  CI (99.9%): [275,453, 284,152] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2672852,889 ±(99.9%) 325,293 B/op [Average]
  (min, avg, max) = (2672715,978, 2672852,889, 2673165,571), stdev = 215,161
  CI (99.9%): [2672527,596, 2673178,182] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  484,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 48,400, 49,000), stdev = 0,699
  CI (99.9%): [484,000, 484,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  343,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (31,000, 34,300, 39,000), stdev = 2,452
  CI (99.9%): [343,000, 343,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 5, type = 2)

# Run progress: 30,95% complete, ETA 00:49:17
# Fork: 1 of 1
# Warmup Iteration   1: Size 90
9,441 ms/op
# Warmup Iteration   2: 8,965 ms/op
# Warmup Iteration   3: 8,956 ms/op
# Warmup Iteration   4: 8,971 ms/op
# Warmup Iteration   5: 8,934 ms/op
# Warmup Iteration   6: 8,904 ms/op
# Warmup Iteration   7: 8,802 ms/op
# Warmup Iteration   8: 8,846 ms/op
# Warmup Iteration   9: 8,880 ms/op
# Warmup Iteration  10: 8,863 ms/op
Iteration   1: 8,858 ms/op
                 ·gc.alloc.rate:      281,748 MB/sec
                 ·gc.alloc.rate.norm: 2616948,644 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration   2: 8,935 ms/op
                 ·gc.alloc.rate:      279,183 MB/sec
                 ·gc.alloc.rate.norm: 2615872,813 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   3: 8,875 ms/op
                 ·gc.alloc.rate:      281,079 MB/sec
                 ·gc.alloc.rate.norm: 2615872,227 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            40,000 ms

Iteration   4: 8,917 ms/op
                 ·gc.alloc.rate:      279,755 MB/sec
                 ·gc.alloc.rate.norm: 2615872,456 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            36,000 ms

Iteration   5: 8,905 ms/op
                 ·gc.alloc.rate:      280,147 MB/sec
                 ·gc.alloc.rate.norm: 2615872,313 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration   6: 8,961 ms/op
                 ·gc.alloc.rate:      278,370 MB/sec
                 ·gc.alloc.rate.norm: 2615894,371 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   7: 8,879 ms/op
                 ·gc.alloc.rate:      280,958 MB/sec
                 ·gc.alloc.rate.norm: 2615872,170 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms

Iteration   8: 8,901 ms/op
                 ·gc.alloc.rate:      280,268 MB/sec
                 ·gc.alloc.rate.norm: 2615872,313 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            32,000 ms

Iteration   9: 8,995 ms/op
                 ·gc.alloc.rate:      277,320 MB/sec
                 ·gc.alloc.rate.norm: 2615872,731 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration  10: 8,923 ms/op
                 ·gc.alloc.rate:      279,578 MB/sec
                 ·gc.alloc.rate.norm: 2615872,513 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  8,915 ±(99.9%) 0,063 ms/op [Average]
  (min, avg, max) = (8,858, 8,915, 8,995), stdev = 0,042
  CI (99.9%): [8,852, 8,978] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  279,841 ±(99.9%) 1,998 MB/sec [Average]
  (min, avg, max) = (277,320, 279,841, 281,748), stdev = 1,322
  CI (99.9%): [277,842, 281,839] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2615982,255 ±(99.9%) 513,464 B/op [Average]
  (min, avg, max) = (2615872,170, 2615982,255, 2616948,644), stdev = 339,625
  CI (99.9%): [2615468,791, 2616495,719] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  484,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (48,000, 48,400, 49,000), stdev = 0,516
  CI (99.9%): [484,000, 484,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  346,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (32,000, 34,600, 40,000), stdev = 2,459
  CI (99.9%): [346,000, 346,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 5, type = 3)

# Run progress: 33,33% complete, ETA 00:47:33
# Fork: 1 of 1
# Warmup Iteration   1: Size 12087
1373,762 ms/op
# Warmup Iteration   2: 1305,000 ms/op
# Warmup Iteration   3: 1235,879 ms/op
# Warmup Iteration   4: 1210,696 ms/op
# Warmup Iteration   5: 1211,663 ms/op
# Warmup Iteration   6: 1215,294 ms/op
# Warmup Iteration   7: 1209,710 ms/op
# Warmup Iteration   8: 1210,462 ms/op
# Warmup Iteration   9: 1203,340 ms/op
# Warmup Iteration  10: 1216,864 ms/op
Iteration   1: 1225,248 ms/op
                 ·gc.alloc.rate:      275,379 MB/sec
                 ·gc.alloc.rate.norm: 353814337,600 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            58,000 ms

Iteration   2: 1209,393 ms/op
                 ·gc.alloc.rate:      278,989 MB/sec
                 ·gc.alloc.rate.norm: 353809664,000 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            56,000 ms

Iteration   3: 1219,384 ms/op
                 ·gc.alloc.rate:      276,709 MB/sec
                 ·gc.alloc.rate.norm: 353815921,600 B/op
                 ·gc.count:           7,000 counts
                 ·gc.time:            116,000 ms

Iteration   4: 1210,003 ms/op
                 ·gc.alloc.rate:      278,848 MB/sec
                 ·gc.alloc.rate.norm: 353811672,000 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            30,000 ms

Iteration   5: 1205,641 ms/op
                 ·gc.alloc.rate:      279,852 MB/sec
                 ·gc.alloc.rate.norm: 353815001,600 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            58,000 ms

Iteration   6: 1227,693 ms/op
                 ·gc.alloc.rate:      274,828 MB/sec
                 ·gc.alloc.rate.norm: 353813350,400 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            47,000 ms

Iteration   7: 1225,914 ms/op
                 ·gc.alloc.rate:      275,233 MB/sec
                 ·gc.alloc.rate.norm: 353813553,600 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            91,000 ms

Iteration   8: 1209,450 ms/op
                 ·gc.alloc.rate:      278,969 MB/sec
                 ·gc.alloc.rate.norm: 353811848,000 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            34,000 ms

Iteration   9: 1205,172 ms/op
                 ·gc.alloc.rate:      279,970 MB/sec
                 ·gc.alloc.rate.norm: 353811536,000 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            49,000 ms

Iteration  10: 1214,072 ms/op
                 ·gc.alloc.rate:      277,915 MB/sec
                 ·gc.alloc.rate.norm: 353809473,600 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            112,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  1215,197 ±(99.9%) 13,106 ms/op [Average]
  (min, avg, max) = (1205,172, 1215,197, 1227,693), stdev = 8,669
  CI (99.9%): [1202,091, 1228,303] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  277,669 ±(99.9%) 2,986 MB/sec [Average]
  (min, avg, max) = (274,828, 277,669, 279,970), stdev = 1,975
  CI (99.9%): [274,683, 280,655] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  353812635,840 ±(99.9%) 3275,025 B/op [Average]
  (min, avg, max) = (353809473,600, 353812635,840, 353815921,600), stdev = 2166,226
  CI (99.9%): [353809360,815, 353815910,865] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  61,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (4,000, 6,100, 8,000), stdev = 1,287
  CI (99.9%): [61,000, 61,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  651,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (30,000, 65,100, 116,000), stdev = 30,607
  CI (99.9%): [651,000, 651,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 6, type = 1)

# Run progress: 35,71% complete, ETA 00:46:24
# Fork: 1 of 1
# Warmup Iteration   1: Size 100
10,655 ms/op
# Warmup Iteration   2: 10,139 ms/op
# Warmup Iteration   3: 10,207 ms/op
# Warmup Iteration   4: 10,169 ms/op
# Warmup Iteration   5: 10,169 ms/op
# Warmup Iteration   6: 10,171 ms/op
# Warmup Iteration   7: 10,085 ms/op
# Warmup Iteration   8: 10,146 ms/op
# Warmup Iteration   9: 10,114 ms/op
# Warmup Iteration  10: 10,131 ms/op
Iteration   1: 10,193 ms/op
                 ·gc.alloc.rate:      271,788 MB/sec
                 ·gc.alloc.rate.norm: 2904877,772 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            30,000 ms

Iteration   2: 10,038 ms/op
                 ·gc.alloc.rate:      275,964 MB/sec
                 ·gc.alloc.rate.norm: 2904864,593 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            33,000 ms

Iteration   3: 10,223 ms/op
                 ·gc.alloc.rate:      270,974 MB/sec
                 ·gc.alloc.rate.norm: 2904861,800 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            33,000 ms

Iteration   4: 10,129 ms/op
                 ·gc.alloc.rate:      273,496 MB/sec
                 ·gc.alloc.rate.norm: 2904862,065 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   5: 10,097 ms/op
                 ·gc.alloc.rate:      274,348 MB/sec
                 ·gc.alloc.rate.norm: 2904861,698 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   6: 10,094 ms/op
                 ·gc.alloc.rate:      274,424 MB/sec
                 ·gc.alloc.rate.norm: 2904886,245 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms

Iteration   7: 10,078 ms/op
                 ·gc.alloc.rate:      274,871 MB/sec
                 ·gc.alloc.rate.norm: 2904861,634 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   8: 10,043 ms/op
                 ·gc.alloc.rate:      275,843 MB/sec
                 ·gc.alloc.rate.norm: 2904861,552 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   9: 10,077 ms/op
                 ·gc.alloc.rate:      274,887 MB/sec
                 ·gc.alloc.rate.norm: 2904861,634 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            36,000 ms

Iteration  10: 10,064 ms/op
                 ·gc.alloc.rate:      275,252 MB/sec
                 ·gc.alloc.rate.norm: 2904861,579 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  10,104 ±(99.9%) 0,093 ms/op [Average]
  (min, avg, max) = (10,038, 10,104, 10,223), stdev = 0,061
  CI (99.9%): [10,011, 10,196] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  274,185 ±(99.9%) 2,501 MB/sec [Average]
  (min, avg, max) = (270,974, 274,185, 275,964), stdev = 1,654
  CI (99.9%): [271,684, 276,686] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2904866,057 ±(99.9%) 13,137 B/op [Average]
  (min, avg, max) = (2904861,552, 2904866,057, 2904886,245), stdev = 8,689
  CI (99.9%): [2904852,921, 2904879,194] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  474,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 47,400, 48,000), stdev = 0,516
  CI (99.9%): [474,000, 474,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  327,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (30,000, 32,700, 36,000), stdev = 1,567
  CI (99.9%): [327,000, 327,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 6, type = 2)

# Run progress: 38,10% complete, ETA 00:44:37
# Fork: 1 of 1
# Warmup Iteration   1: Size 98
10,313 ms/op
# Warmup Iteration   2: 10,225 ms/op
# Warmup Iteration   3: 9,841 ms/op
# Warmup Iteration   4: 9,830 ms/op
# Warmup Iteration   5: 9,824 ms/op
# Warmup Iteration   6: 9,727 ms/op
# Warmup Iteration   7: 9,661 ms/op
# Warmup Iteration   8: 9,863 ms/op
# Warmup Iteration   9: 9,939 ms/op
# Warmup Iteration  10: 9,982 ms/op
Iteration   1: 9,665 ms/op
                 ·gc.alloc.rate:      281,052 MB/sec
                 ·gc.alloc.rate.norm: 2848485,349 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   2: 9,676 ms/op
                 ·gc.alloc.rate:      280,741 MB/sec
                 ·gc.alloc.rate.norm: 2848471,599 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            38,000 ms

Iteration   3: 9,613 ms/op
                 ·gc.alloc.rate:      282,592 MB/sec
                 ·gc.alloc.rate.norm: 2848471,326 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration   4: 9,782 ms/op
                 ·gc.alloc.rate:      277,706 MB/sec
                 ·gc.alloc.rate.norm: 2848472,546 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   5: 9,744 ms/op
                 ·gc.alloc.rate:      278,781 MB/sec
                 ·gc.alloc.rate.norm: 2848472,062 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   6: 9,700 ms/op
                 ·gc.alloc.rate:      280,018 MB/sec
                 ·gc.alloc.rate.norm: 2848495,443 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration   7: 9,771 ms/op
                 ·gc.alloc.rate:      277,996 MB/sec
                 ·gc.alloc.rate.norm: 2848472,218 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   8: 9,705 ms/op
                 ·gc.alloc.rate:      279,909 MB/sec
                 ·gc.alloc.rate.norm: 2848471,876 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration   9: 9,558 ms/op
                 ·gc.alloc.rate:      284,193 MB/sec
                 ·gc.alloc.rate.norm: 2848471,055 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration  10: 9,611 ms/op
                 ·gc.alloc.rate:      282,641 MB/sec
                 ·gc.alloc.rate.norm: 2848471,326 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  9,682 ±(99.9%) 0,110 ms/op [Average]
  (min, avg, max) = (9,558, 9,682, 9,782), stdev = 0,073
  CI (99.9%): [9,572, 9,793] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  280,563 ±(99.9%) 3,209 MB/sec [Average]
  (min, avg, max) = (277,706, 280,563, 284,193), stdev = 2,122
  CI (99.9%): [277,355, 283,772] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  2848475,480 ±(99.9%) 12,436 B/op [Average]
  (min, avg, max) = (2848471,055, 2848475,480, 2848495,443), stdev = 8,226
  CI (99.9%): [2848463,044, 2848487,916] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  485,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (48,000, 48,500, 49,000), stdev = 0,527
  CI (99.9%): [485,000, 485,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  357,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (33,000, 35,700, 38,000), stdev = 1,494
  CI (99.9%): [357,000, 357,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 6, type = 3)

# Run progress: 40,48% complete, ETA 00:42:51
# Fork: 1 of 1
# Warmup Iteration   1: Size 17484
2252,917 ms/op
# Warmup Iteration   2: 2015,001 ms/op
# Warmup Iteration   3: 1845,311 ms/op
# Warmup Iteration   4: 1768,676 ms/op
# Warmup Iteration   5: 1857,238 ms/op
# Warmup Iteration   6: 1708,398 ms/op
# Warmup Iteration   7: 1755,484 ms/op
# Warmup Iteration   8: 1714,945 ms/op
# Warmup Iteration   9: 1726,106 ms/op
# Warmup Iteration  10: 1718,313 ms/op
Iteration   1: 1726,117 ms/op
                 ·gc.alloc.rate:      279,034 MB/sec
                 ·gc.alloc.rate.norm: 505059117,333 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            42,000 ms

Iteration   2: 1712,786 ms/op
                 ·gc.alloc.rate:      281,197 MB/sec
                 ·gc.alloc.rate.norm: 505045221,333 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            12,000 ms

Iteration   3: 1729,651 ms/op
                 ·gc.alloc.rate:      278,457 MB/sec
                 ·gc.alloc.rate.norm: 505050250,667 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            51,000 ms

Iteration   4: 1728,136 ms/op
                 ·gc.alloc.rate:      278,704 MB/sec
                 ·gc.alloc.rate.norm: 505050109,333 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            45,000 ms

Iteration   5: 1750,503 ms/op
                 ·gc.alloc.rate:      275,135 MB/sec
                 ·gc.alloc.rate.norm: 505057365,333 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            129,000 ms

Iteration   6: 1725,265 ms/op
                 ·gc.alloc.rate:      279,152 MB/sec
                 ·gc.alloc.rate.norm: 505053925,333 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            59,000 ms

Iteration   7: 1708,919 ms/op
                 ·gc.alloc.rate:      281,843 MB/sec
                 ·gc.alloc.rate.norm: 505061496,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            40,000 ms

Iteration   8: 1714,414 ms/op
                 ·gc.alloc.rate:      280,941 MB/sec
                 ·gc.alloc.rate.norm: 505061765,333 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            32,000 ms

Iteration   9: 1748,863 ms/op
                 ·gc.alloc.rate:      275,399 MB/sec
                 ·gc.alloc.rate.norm: 505050584,000 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            103,000 ms

Iteration  10: 1706,660 ms/op
                 ·gc.alloc.rate:      282,207 MB/sec
                 ·gc.alloc.rate.norm: 505042237,333 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            29,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  1725,131 ±(99.9%) 23,142 ms/op [Average]
  (min, avg, max) = (1706,660, 1725,131, 1750,503), stdev = 15,307
  CI (99.9%): [1701,990, 1748,273] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  279,207 ±(99.9%) 3,732 MB/sec [Average]
  (min, avg, max) = (275,135, 279,207, 282,207), stdev = 2,469
  CI (99.9%): [275,475, 282,939] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  505053207,200 ±(99.9%) 10129,474 B/op [Average]
  (min, avg, max) = (505042237,333, 505053207,200, 505061765,333), stdev = 6700,020
  CI (99.9%): [505043077,726, 505063336,674] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  36,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (2,000, 3,600, 5,000), stdev = 0,966
  CI (99.9%): [36,000, 36,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  542,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (12,000, 54,200, 129,000), stdev = 35,518
  CI (99.9%): [542,000, 542,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 7, type = 1)

# Run progress: 42,86% complete, ETA 00:41:14
# Fork: 1 of 1
# Warmup Iteration   1: Size 108
11,523 ms/op
# Warmup Iteration   2: 10,715 ms/op
# Warmup Iteration   3: 10,719 ms/op
# Warmup Iteration   4: 10,780 ms/op
# Warmup Iteration   5: 10,716 ms/op
# Warmup Iteration   6: 10,773 ms/op
# Warmup Iteration   7: 10,716 ms/op
# Warmup Iteration   8: 10,769 ms/op
# Warmup Iteration   9: 10,732 ms/op
# Warmup Iteration  10: 10,662 ms/op
Iteration   1: 10,765 ms/op
                 ·gc.alloc.rate:      277,810 MB/sec
                 ·gc.alloc.rate.norm: 3135966,833 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            37,000 ms

Iteration   2: 11,129 ms/op
                 ·gc.alloc.rate:      268,714 MB/sec
                 ·gc.alloc.rate.norm: 3135965,552 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            31,000 ms

Iteration   3: 10,667 ms/op
                 ·gc.alloc.rate:      280,367 MB/sec
                 ·gc.alloc.rate.norm: 3135950,675 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            35,000 ms

Iteration   4: 10,664 ms/op
                 ·gc.alloc.rate:      280,438 MB/sec
                 ·gc.alloc.rate.norm: 3135950,675 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   5: 10,647 ms/op
                 ·gc.alloc.rate:      280,949 MB/sec
                 ·gc.alloc.rate.norm: 3136655,132 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   6: 10,730 ms/op
                 ·gc.alloc.rate:      278,709 MB/sec
                 ·gc.alloc.rate.norm: 3135976,994 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            32,000 ms

Iteration   7: 10,620 ms/op
                 ·gc.alloc.rate:      281,597 MB/sec
                 ·gc.alloc.rate.norm: 3135950,712 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   8: 10,591 ms/op
                 ·gc.alloc.rate:      282,376 MB/sec
                 ·gc.alloc.rate.norm: 3135950,582 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms

Iteration   9: 10,638 ms/op
                 ·gc.alloc.rate:      281,130 MB/sec
                 ·gc.alloc.rate.norm: 3135950,675 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration  10: 10,728 ms/op
                 ·gc.alloc.rate:      278,763 MB/sec
                 ·gc.alloc.rate.norm: 3135950,801 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            38,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  10,718 ±(99.9%) 0,233 ms/op [Average]
  (min, avg, max) = (10,591, 10,718, 11,129), stdev = 0,154
  CI (99.9%): [10,484, 10,951] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  279,085 ±(99.9%) 5,914 MB/sec [Average]
  (min, avg, max) = (268,714, 279,085, 282,376), stdev = 3,912
  CI (99.9%): [273,171, 284,999] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  3136026,863 ±(99.9%) 334,052 B/op [Average]
  (min, avg, max) = (3135950,582, 3136026,863, 3136655,132), stdev = 220,955
  CI (99.9%): [3135692,811, 3136360,915] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  483,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 48,300, 49,000), stdev = 0,675
  CI (99.9%): [483,000, 483,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  355,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (31,000, 35,500, 38,000), stdev = 2,593
  CI (99.9%): [355,000, 355,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 7, type = 2)

# Run progress: 45,24% complete, ETA 00:39:28
# Fork: 1 of 1
# Warmup Iteration   1: Size 106
10,943 ms/op
# Warmup Iteration   2: 10,421 ms/op
# Warmup Iteration   3: 10,429 ms/op
# Warmup Iteration   4: 10,484 ms/op
# Warmup Iteration   5: 10,496 ms/op
# Warmup Iteration   6: 10,387 ms/op
# Warmup Iteration   7: 10,616 ms/op
# Warmup Iteration   8: 10,862 ms/op
# Warmup Iteration   9: 10,752 ms/op
# Warmup Iteration  10: 10,788 ms/op
Iteration   1: 11,799 ms/op
                 ·gc.alloc.rate:      248,952 MB/sec
                 ·gc.alloc.rate.norm: 3080182,099 B/op
                 ·gc.count:           43,000 counts
                 ·gc.time:            24,000 ms

Iteration   2: 13,595 ms/op
                 ·gc.alloc.rate:      216,060 MB/sec
                 ·gc.alloc.rate.norm: 3080190,959 B/op
                 ·gc.count:           38,000 counts
                 ·gc.time:            22,000 ms

Iteration   3: 14,669 ms/op
                 ·gc.alloc.rate:      200,246 MB/sec
                 ·gc.alloc.rate.norm: 3080180,945 B/op
                 ·gc.count:           34,000 counts
                 ·gc.time:            28,000 ms

Iteration   4: 17,754 ms/op
                 ·gc.alloc.rate:      165,450 MB/sec
                 ·gc.alloc.rate.norm: 3080197,589 B/op
                 ·gc.count:           29,000 counts
                 ·gc.time:            22,000 ms

Iteration   5: 11,628 ms/op
                 ·gc.alloc.rate:      252,618 MB/sec
                 ·gc.alloc.rate.norm: 3080165,309 B/op
                 ·gc.count:           44,000 counts
                 ·gc.time:            24,000 ms

Iteration   6: 11,792 ms/op
                 ·gc.alloc.rate:      249,080 MB/sec
                 ·gc.alloc.rate.norm: 3080195,351 B/op
                 ·gc.count:           43,000 counts
                 ·gc.time:            23,000 ms

Iteration   7: 14,350 ms/op
                 ·gc.alloc.rate:      204,691 MB/sec
                 ·gc.alloc.rate.norm: 3080179,497 B/op
                 ·gc.count:           31,000 counts
                 ·gc.time:            65,000 ms

Iteration   8: 12,798 ms/op
                 ·gc.alloc.rate:      229,517 MB/sec
                 ·gc.alloc.rate.norm: 3080171,327 B/op
                 ·gc.count:           24,000 counts
                 ·gc.time:            27,000 ms

Iteration   9: 12,005 ms/op
                 ·gc.alloc.rate:      244,678 MB/sec
                 ·gc.alloc.rate.norm: 3080167,139 B/op
                 ·gc.count:           35,000 counts
                 ·gc.time:            23,000 ms

Iteration  10: 11,360 ms/op
                 ·gc.alloc.rate:      258,573 MB/sec
                 ·gc.alloc.rate.norm: 3080163,783 B/op
                 ·gc.count:           45,000 counts
                 ·gc.time:            24,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  13,175 ±(99.9%) 3,014 ms/op [Average]
  (min, avg, max) = (11,360, 13,175, 17,754), stdev = 1,993
  CI (99.9%): [10,161, 16,189] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  226,987 ±(99.9%) 45,252 MB/sec [Average]
  (min, avg, max) = (165,450, 226,987, 258,573), stdev = 29,931
  CI (99.9%): [181,735, 272,239] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  3080179,400 ±(99.9%) 18,765 B/op [Average]
  (min, avg, max) = (3080163,783, 3080179,400, 3080197,589), stdev = 12,412
  CI (99.9%): [3080160,634, 3080198,165] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  366,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (24,000, 36,600, 45,000), stdev = 7,199
  CI (99.9%): [366,000, 366,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  282,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (22,000, 28,200, 65,000), stdev = 13,079
  CI (99.9%): [282,000, 282,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 1, size = 7, type = 3)

# Run progress: 47,62% complete, ETA 00:37:42
# Fork: 1 of 1
# Warmup Iteration   1: Size 24285
2777,622 ms/op
# Warmup Iteration   2: 2544,101 ms/op
# Warmup Iteration   3: 2511,097 ms/op
# Warmup Iteration   4: 2588,405 ms/op
# Warmup Iteration   5: 2988,380 ms/op
# Warmup Iteration   6: 2536,903 ms/op
# Warmup Iteration   7: 2761,823 ms/op
# Warmup Iteration   8: 2795,258 ms/op
# Warmup Iteration   9: 3031,232 ms/op
# Warmup Iteration  10: 2552,555 ms/op
Iteration   1: 2569,261 ms/op
                 ·gc.alloc.rate:      260,310 MB/sec
                 ·gc.alloc.rate.norm: 701324396,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            16,000 ms

Iteration   2: 2460,635 ms/op
                 ·gc.alloc.rate:      271,804 MB/sec
                 ·gc.alloc.rate.norm: 701320776,000 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            176,000 ms

Iteration   3: 2431,638 ms/op
                 ·gc.alloc.rate:      275,045 MB/sec
                 ·gc.alloc.rate.norm: 701321456,000 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            134,000 ms

Iteration   4: 2441,777 ms/op
                 ·gc.alloc.rate:      273,905 MB/sec
                 ·gc.alloc.rate.norm: 701320440,000 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            151,000 ms

Iteration   5: 2424,136 ms/op
                 ·gc.alloc.rate:      275,896 MB/sec
                 ·gc.alloc.rate.norm: 701319032,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            29,000 ms

Iteration   6: 2409,264 ms/op
                 ·gc.alloc.rate:      277,585 MB/sec
                 ·gc.alloc.rate.norm: 701324160,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            39,000 ms

Iteration   7: 2398,061 ms/op
                 ·gc.alloc.rate:      278,888 MB/sec
                 ·gc.alloc.rate.norm: 701321938,667 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            27,000 ms

Iteration   8: 2415,631 ms/op
                 ·gc.alloc.rate:      276,864 MB/sec
                 ·gc.alloc.rate.norm: 701320018,667 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            28,000 ms

Iteration   9: 2395,166 ms/op
                 ·gc.alloc.rate:      279,236 MB/sec
                 ·gc.alloc.rate.norm: 701321328,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            23,000 ms

Iteration  10: 2387,356 ms/op
                 ·gc.alloc.rate:      280,146 MB/sec
                 ·gc.alloc.rate.norm: 701319832,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            26,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  2433,292 ±(99.9%) 79,822 ms/op [Average]
  (min, avg, max) = (2387,356, 2433,292, 2569,261), stdev = 52,797
  CI (99.9%): [2353,470, 2513,114] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  274,968 ±(99.9%) 8,695 MB/sec [Average]
  (min, avg, max) = (260,310, 274,968, 280,146), stdev = 5,751
  CI (99.9%): [266,272, 283,663] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  701321337,733 ±(99.9%) 2673,250 B/op [Average]
  (min, avg, max) = (701319032,000, 701321337,733, 701324396,000), stdev = 1768,189
  CI (99.9%): [701318664,484, 701324010,983] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  30,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (2,000, 3,000, 5,000), stdev = 1,414
  CI (99.9%): [30,000, 30,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  649,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (16,000, 64,900, 176,000), stdev = 62,315
  CI (99.9%): [649,000, 649,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 1, type = 1)

# Run progress: 50,00% complete, ETA 00:36:22
# Fork: 1 of 1
# Warmup Iteration   1: Size 15
16,773 ms/op
# Warmup Iteration   2: 14,770 ms/op
# Warmup Iteration   3: 14,916 ms/op
# Warmup Iteration   4: 14,528 ms/op
# Warmup Iteration   5: 14,500 ms/op
# Warmup Iteration   6: 14,546 ms/op
# Warmup Iteration   7: 14,477 ms/op
# Warmup Iteration   8: 14,667 ms/op
# Warmup Iteration   9: 14,581 ms/op
# Warmup Iteration  10: 14,673 ms/op
Iteration   1: 14,559 ms/op
                 ·gc.alloc.rate:      283,949 MB/sec
                 ·gc.alloc.rate.norm: 4335057,674 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            33,000 ms

Iteration   2: 14,593 ms/op
                 ·gc.alloc.rate:      283,297 MB/sec
                 ·gc.alloc.rate.norm: 4335057,674 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   3: 14,424 ms/op
                 ·gc.alloc.rate:      286,595 MB/sec
                 ·gc.alloc.rate.norm: 4335057,563 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms

Iteration   4: 14,477 ms/op
                 ·gc.alloc.rate:      285,523 MB/sec
                 ·gc.alloc.rate.norm: 4334620,231 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            38,000 ms

Iteration   5: 14,478 ms/op
                 ·gc.alloc.rate:      285,503 MB/sec
                 ·gc.alloc.rate.norm: 4334537,572 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms

Iteration   6: 14,319 ms/op
                 ·gc.alloc.rate:      288,627 MB/sec
                 ·gc.alloc.rate.norm: 4334038,971 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            37,000 ms

Iteration   7: 14,313 ms/op
                 ·gc.alloc.rate:      288,759 MB/sec
                 ·gc.alloc.rate.norm: 4333913,322 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            39,000 ms

Iteration   8: 14,263 ms/op
                 ·gc.alloc.rate:      289,770 MB/sec
                 ·gc.alloc.rate.norm: 4333913,322 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            36,000 ms

Iteration   9: 14,353 ms/op
                 ·gc.alloc.rate:      287,960 MB/sec
                 ·gc.alloc.rate.norm: 4333899,794 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            35,000 ms

Iteration  10: 14,325 ms/op
                 ·gc.alloc.rate:      288,507 MB/sec
                 ·gc.alloc.rate.norm: 4333865,943 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            35,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  14,410 ±(99.9%) 0,171 ms/op [Average]
  (min, avg, max) = (14,263, 14,410, 14,593), stdev = 0,113
  CI (99.9%): [14,240, 14,581] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  286,849 ±(99.9%) 3,342 MB/sec [Average]
  (min, avg, max) = (283,297, 286,849, 289,770), stdev = 2,211
  CI (99.9%): [283,507, 290,191] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  4334396,207 ±(99.9%) 797,491 B/op [Average]
  (min, avg, max) = (4333865,943, 4334396,207, 4335057,674), stdev = 527,491
  CI (99.9%): [4333598,716, 4335193,698] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  496,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (49,000, 49,600, 50,000), stdev = 0,516
  CI (99.9%): [496,000, 496,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  363,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (33,000, 36,300, 39,000), stdev = 2,003
  CI (99.9%): [363,000, 363,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 1, type = 2)

# Run progress: 52,38% complete, ETA 00:34:35
# Fork: 1 of 1
# Warmup Iteration   1: Size 12
20,536 ms/op
# Warmup Iteration   2: 16,587 ms/op
# Warmup Iteration   3: 16,403 ms/op
# Warmup Iteration   4: 16,234 ms/op
# Warmup Iteration   5: 16,112 ms/op
# Warmup Iteration   6: 16,304 ms/op
# Warmup Iteration   7: 15,990 ms/op
# Warmup Iteration   8: 15,856 ms/op
# Warmup Iteration   9: 16,093 ms/op
# Warmup Iteration  10: 15,909 ms/op
Iteration   1: 15,884 ms/op
                 ·gc.alloc.rate:      273,151 MB/sec
                 ·gc.alloc.rate.norm: 4549675,443 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            43,000 ms

Iteration   2: 16,179 ms/op
                 ·gc.alloc.rate:      268,172 MB/sec
                 ·gc.alloc.rate.norm: 4549676,439 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            52,000 ms

Iteration   3: 15,875 ms/op
                 ·gc.alloc.rate:      273,296 MB/sec
                 ·gc.alloc.rate.norm: 4549675,606 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            25,000 ms

Iteration   4: 17,121 ms/op
                 ·gc.alloc.rate:      253,418 MB/sec
                 ·gc.alloc.rate.norm: 4549679,481 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            49,000 ms

Iteration   5: 16,080 ms/op
                 ·gc.alloc.rate:      269,816 MB/sec
                 ·gc.alloc.rate.norm: 4549676,103 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            17,000 ms

Iteration   6: 16,729 ms/op
                 ·gc.alloc.rate:      259,343 MB/sec
                 ·gc.alloc.rate.norm: 4549717,573 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            48,000 ms

Iteration   7: 16,296 ms/op
                 ·gc.alloc.rate:      266,079 MB/sec
                 ·gc.alloc.rate.norm: 4549824,623 B/op
                 ·gc.count:           7,000 counts
                 ·gc.time:            21,000 ms

Iteration   8: 16,020 ms/op
                 ·gc.alloc.rate:      270,841 MB/sec
                 ·gc.alloc.rate.norm: 4549792,383 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            54,000 ms

Iteration   9: 16,070 ms/op
                 ·gc.alloc.rate:      269,987 MB/sec
                 ·gc.alloc.rate.norm: 4549676,103 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            16,000 ms

Iteration  10: 16,056 ms/op
                 ·gc.alloc.rate:      270,219 MB/sec
                 ·gc.alloc.rate.norm: 4549675,936 B/op
                 ·gc.count:           7,000 counts
                 ·gc.time:            47,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  16,231 ±(99.9%) 0,600 ms/op [Average]
  (min, avg, max) = (15,875, 16,231, 17,121), stdev = 0,397
  CI (99.9%): [15,631, 16,831] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  267,432 ±(99.9%) 9,600 MB/sec [Average]
  (min, avg, max) = (253,418, 267,432, 273,296), stdev = 6,350
  CI (99.9%): [257,832, 277,033] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  4549706,969 ±(99.9%) 84,002 B/op [Average]
  (min, avg, max) = (4549675,443, 4549706,969, 4549824,623), stdev = 55,562
  CI (99.9%): [4549622,967, 4549790,971] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  62,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (5,000, 6,200, 8,000), stdev = 1,229
  CI (99.9%): [62,000, 62,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  372,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (16,000, 37,200, 54,000), stdev = 15,476
  CI (99.9%): [372,000, 372,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 1, type = 3)

# Run progress: 54,76% complete, ETA 00:32:49
# Fork: 1 of 1
# Warmup Iteration   1: Size 11
487,612 ms/op
# Warmup Iteration   2: 391,423 ms/op
# Warmup Iteration   3: 386,113 ms/op
# Warmup Iteration   4: 393,201 ms/op
# Warmup Iteration   5: 388,536 ms/op
# Warmup Iteration   6: 382,058 ms/op
# Warmup Iteration   7: 393,240 ms/op
# Warmup Iteration   8: 388,628 ms/op
# Warmup Iteration   9: 382,119 ms/op
# Warmup Iteration  10: 379,408 ms/op
Iteration   1: 382,175 ms/op
                 ·gc.alloc.rate:      240,471 MB/sec
                 ·gc.alloc.rate.norm: 96374352,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            67,000 ms

Iteration   2: 382,388 ms/op
                 ·gc.alloc.rate:      240,349 MB/sec
                 ·gc.alloc.rate.norm: 96374352,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            71,000 ms

Iteration   3: 382,415 ms/op
                 ·gc.alloc.rate:      240,328 MB/sec
                 ·gc.alloc.rate.norm: 96374352,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            68,000 ms

Iteration   4: 383,460 ms/op
                 ·gc.alloc.rate:      239,677 MB/sec
                 ·gc.alloc.rate.norm: 96374352,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            71,000 ms

Iteration   5: 382,487 ms/op
                 ·gc.alloc.rate:      240,284 MB/sec
                 ·gc.alloc.rate.norm: 96374357,714 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            14,000 ms

Iteration   6: 380,640 ms/op
                 ·gc.alloc.rate:      241,438 MB/sec
                 ·gc.alloc.rate.norm: 96373324,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            71,000 ms

Iteration   7: 379,028 ms/op
                 ·gc.alloc.rate:      242,472 MB/sec
                 ·gc.alloc.rate.norm: 96371757,143 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            71,000 ms

Iteration   8: 376,629 ms/op
                 ·gc.alloc.rate:      244,017 MB/sec
                 ·gc.alloc.rate.norm: 96371752,571 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            56,000 ms

Iteration   9: 384,019 ms/op
                 ·gc.alloc.rate:      239,322 MB/sec
                 ·gc.alloc.rate.norm: 96371754,857 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            71,000 ms

Iteration  10: 386,556 ms/op
                 ·gc.alloc.rate:      237,739 MB/sec
                 ·gc.alloc.rate.norm: 96371817,231 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            71,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  381,980 ±(99.9%) 4,128 ms/op [Average]
  (min, avg, max) = (376,629, 381,980, 386,556), stdev = 2,730
  CI (99.9%): [377,852, 386,107] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  240,610 ±(99.9%) 2,609 MB/sec [Average]
  (min, avg, max) = (237,739, 240,610, 244,017), stdev = 1,726
  CI (99.9%): [238,000, 243,219] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  96373217,380 ±(99.9%) 1941,605 B/op [Average]
  (min, avg, max) = (96371752,571, 96373217,380, 96374357,714), stdev = 1284,251
  CI (99.9%): [96371275,775, 96375158,985] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  27,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,700, 3,000), stdev = 0,675
  CI (99.9%): [27,000, 27,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  631,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (14,000, 63,100, 71,000), stdev = 17,873
  CI (99.9%): [631,000, 631,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 2, type = 1)

# Run progress: 57,14% complete, ETA 00:31:06
# Fork: 1 of 1
# Warmup Iteration   1: Size 16
18,615 ms/op
# Warmup Iteration   2: 16,473 ms/op
# Warmup Iteration   3: 16,525 ms/op
# Warmup Iteration   4: 16,357 ms/op
# Warmup Iteration   5: 16,192 ms/op
# Warmup Iteration   6: 16,095 ms/op
# Warmup Iteration   7: 16,006 ms/op
# Warmup Iteration   8: 16,266 ms/op
# Warmup Iteration   9: 16,119 ms/op
# Warmup Iteration  10: 16,162 ms/op
Iteration   1: 16,211 ms/op
                 ·gc.alloc.rate:      286,489 MB/sec
                 ·gc.alloc.rate.norm: 4869970,201 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            36,000 ms

Iteration   2: 16,122 ms/op
                 ·gc.alloc.rate:      288,056 MB/sec
                 ·gc.alloc.rate.norm: 4869804,064 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            39,000 ms

Iteration   3: 16,069 ms/op
                 ·gc.alloc.rate:      289,003 MB/sec
                 ·gc.alloc.rate.norm: 4869803,897 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            38,000 ms

Iteration   4: 16,279 ms/op
                 ·gc.alloc.rate:      285,283 MB/sec
                 ·gc.alloc.rate.norm: 4869804,156 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   5: 16,161 ms/op
                 ·gc.alloc.rate:      287,349 MB/sec
                 ·gc.alloc.rate.norm: 4869603,318 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            41,000 ms

Iteration   6: 16,368 ms/op
                 ·gc.alloc.rate:      283,692 MB/sec
                 ·gc.alloc.rate.norm: 4869324,091 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   7: 16,107 ms/op
                 ·gc.alloc.rate:      288,401 MB/sec
                 ·gc.alloc.rate.norm: 4871070,662 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            35,000 ms

Iteration   8: 15,959 ms/op
                 ·gc.alloc.rate:      290,935 MB/sec
                 ·gc.alloc.rate.norm: 4868679,873 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            36,000 ms

Iteration   9: 16,008 ms/op
                 ·gc.alloc.rate:      290,032 MB/sec
                 ·gc.alloc.rate.norm: 4868555,834 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            37,000 ms

Iteration  10: 16,026 ms/op
                 ·gc.alloc.rate:      289,715 MB/sec
                 ·gc.alloc.rate.norm: 4868555,834 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            41,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  16,131 ±(99.9%) 0,192 ms/op [Average]
  (min, avg, max) = (15,959, 16,131, 16,368), stdev = 0,127
  CI (99.9%): [15,939, 16,323] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  287,895 ±(99.9%) 3,395 MB/sec [Average]
  (min, avg, max) = (283,692, 287,895, 290,935), stdev = 2,246
  CI (99.9%): [284,500, 291,291] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  4869517,193 ±(99.9%) 1177,520 B/op [Average]
  (min, avg, max) = (4868555,834, 4869517,193, 4871070,662), stdev = 778,857
  CI (99.9%): [4868339,673, 4870694,713] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  496,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (49,000, 49,600, 50,000), stdev = 0,516
  CI (99.9%): [496,000, 496,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  371,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (34,000, 37,100, 41,000), stdev = 2,601
  CI (99.9%): [371,000, 371,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 2, type = 2)

# Run progress: 59,52% complete, ETA 00:29:21
# Fork: 1 of 1
# Warmup Iteration   1: Size 13
25,280 ms/op
# Warmup Iteration   2: 19,216 ms/op
# Warmup Iteration   3: 18,804 ms/op
# Warmup Iteration   4: 18,627 ms/op
# Warmup Iteration   5: 18,571 ms/op
# Warmup Iteration   6: 18,219 ms/op
# Warmup Iteration   7: 18,393 ms/op
# Warmup Iteration   8: 18,460 ms/op
# Warmup Iteration   9: 18,321 ms/op
# Warmup Iteration  10: 18,456 ms/op
Iteration   1: 18,594 ms/op
                 ·gc.alloc.rate:      267,499 MB/sec
                 ·gc.alloc.rate.norm: 5215648,622 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            45,000 ms

Iteration   2: 18,234 ms/op
                 ·gc.alloc.rate:      272,773 MB/sec
                 ·gc.alloc.rate.norm: 5215647,564 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            13,000 ms

Iteration   3: 18,339 ms/op
                 ·gc.alloc.rate:      271,219 MB/sec
                 ·gc.alloc.rate.norm: 5215647,679 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            44,000 ms

Iteration   4: 19,109 ms/op
                 ·gc.alloc.rate:      260,292 MB/sec
                 ·gc.alloc.rate.norm: 5215650,342 B/op
                 ·gc.count:           6,000 counts
                 ·gc.time:            53,000 ms

Iteration   5: 18,525 ms/op
                 ·gc.alloc.rate:      268,502 MB/sec
                 ·gc.alloc.rate.norm: 5215648,384 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            23,000 ms

Iteration   6: 18,648 ms/op
                 ·gc.alloc.rate:      266,709 MB/sec
                 ·gc.alloc.rate.norm: 5215692,877 B/op
                 ·gc.count:           7,000 counts
                 ·gc.time:            53,000 ms

Iteration   7: 18,559 ms/op
                 ·gc.alloc.rate:      267,998 MB/sec
                 ·gc.alloc.rate.norm: 5215648,622 B/op
                 ·gc.count:           7,000 counts
                 ·gc.time:            44,000 ms

Iteration   8: 18,437 ms/op
                 ·gc.alloc.rate:      269,763 MB/sec
                 ·gc.alloc.rate.norm: 5215648,147 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            28,000 ms

Iteration   9: 18,393 ms/op
                 ·gc.alloc.rate:      270,420 MB/sec
                 ·gc.alloc.rate.norm: 5215647,912 B/op
                 ·gc.count:           8,000 counts
                 ·gc.time:            54,000 ms

Iteration  10: 18,571 ms/op
                 ·gc.alloc.rate:      267,822 MB/sec
                 ·gc.alloc.rate.norm: 5215648,889 B/op
                 ·gc.count:           9,000 counts
                 ·gc.time:            49,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  18,541 ±(99.9%) 0,358 ms/op [Average]
  (min, avg, max) = (18,234, 18,541, 19,109), stdev = 0,237
  CI (99.9%): [18,183, 18,899] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  268,300 ±(99.9%) 5,110 MB/sec [Average]
  (min, avg, max) = (260,292, 268,300, 272,773), stdev = 3,380
  CI (99.9%): [263,189, 273,410] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  5215652,904 ±(99.9%) 21,268 B/op [Average]
  (min, avg, max) = (5215647,564, 5215652,904, 5215692,877), stdev = 14,067
  CI (99.9%): [5215631,636, 5215674,172] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  62,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (3,000, 6,200, 9,000), stdev = 1,932
  CI (99.9%): [62,000, 62,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  406,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (13,000, 40,600, 54,000), stdev = 14,261
  CI (99.9%): [406,000, 406,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 2, type = 3)

# Run progress: 61,90% complete, ETA 00:27:35
# Fork: 1 of 1
# Warmup Iteration   1: Size 13
962,122 ms/op
# Warmup Iteration   2: 795,155 ms/op
# Warmup Iteration   3: 806,180 ms/op
# Warmup Iteration   4: 799,086 ms/op
# Warmup Iteration   5: 793,692 ms/op
# Warmup Iteration   6: 804,572 ms/op
# Warmup Iteration   7: 803,550 ms/op
# Warmup Iteration   8: 813,251 ms/op
# Warmup Iteration   9: 801,703 ms/op
# Warmup Iteration  10: 794,689 ms/op
Iteration   1: 793,533 ms/op
                 ·gc.alloc.rate:      240,739 MB/sec
                 ·gc.alloc.rate.norm: 200323572,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            78,000 ms

Iteration   2: 796,530 ms/op
                 ·gc.alloc.rate:      239,836 MB/sec
                 ·gc.alloc.rate.norm: 200323577,143 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            77,000 ms

Iteration   3: 794,297 ms/op
                 ·gc.alloc.rate:      240,512 MB/sec
                 ·gc.alloc.rate.norm: 200323572,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            77,000 ms

Iteration   4: 798,151 ms/op
                 ·gc.alloc.rate:      239,346 MB/sec
                 ·gc.alloc.rate.norm: 200323577,143 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            80,000 ms

Iteration   5: 803,651 ms/op
                 ·gc.alloc.rate:      237,712 MB/sec
                 ·gc.alloc.rate.norm: 200323581,714 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            84,000 ms

Iteration   6: 803,188 ms/op
                 ·gc.alloc.rate:      237,835 MB/sec
                 ·gc.alloc.rate.norm: 200325260,571 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            73,000 ms

Iteration   7: 801,967 ms/op
                 ·gc.alloc.rate:      238,211 MB/sec
                 ·gc.alloc.rate.norm: 200323572,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            88,000 ms

Iteration   8: 811,858 ms/op
                 ·gc.alloc.rate:      235,309 MB/sec
                 ·gc.alloc.rate.norm: 200323572,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            88,000 ms

Iteration   9: 801,006 ms/op
                 ·gc.alloc.rate:      238,498 MB/sec
                 ·gc.alloc.rate.norm: 200323577,143 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            15,000 ms

Iteration  10: 791,278 ms/op
                 ·gc.alloc.rate:      241,417 MB/sec
                 ·gc.alloc.rate.norm: 200323572,571 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            89,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  799,546 ±(99.9%) 9,194 ms/op [Average]
  (min, avg, max) = (791,278, 799,546, 811,858), stdev = 6,081
  CI (99.9%): [790,352, 808,740] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  238,942 ±(99.9%) 2,735 MB/sec [Average]
  (min, avg, max) = (235,309, 238,942, 241,417), stdev = 1,809
  CI (99.9%): [236,207, 241,676] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  200323743,657 ±(99.9%) 805,818 B/op [Average]
  (min, avg, max) = (200323572,571, 200323743,657, 200325260,571), stdev = 532,999
  CI (99.9%): [200322937,839, 200324549,475] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  27,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,700, 3,000), stdev = 0,675
  CI (99.9%): [27,000, 27,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  749,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (15,000, 74,900, 89,000), stdev = 21,759
  CI (99.9%): [749,000, 749,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 3, type = 1)

# Run progress: 64,29% complete, ETA 00:25:57
# Fork: 1 of 1
# Warmup Iteration   1: Size 17
20,622 ms/op
# Warmup Iteration   2: 18,146 ms/op
# Warmup Iteration   3: 18,369 ms/op
# Warmup Iteration   4: 18,264 ms/op
# Warmup Iteration   5: 18,167 ms/op
# Warmup Iteration   6: 18,119 ms/op
# Warmup Iteration   7: 18,192 ms/op
# Warmup Iteration   8: 18,165 ms/op
# Warmup Iteration   9: 18,145 ms/op
# Warmup Iteration  10: 18,300 ms/op
Iteration   1: 18,194 ms/op
                 ·gc.alloc.rate:      283,340 MB/sec
                 ·gc.alloc.rate.norm: 5405695,101 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            33,000 ms

Iteration   2: 18,222 ms/op
                 ·gc.alloc.rate:      282,896 MB/sec
                 ·gc.alloc.rate.norm: 5405695,069 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   3: 18,059 ms/op
                 ·gc.alloc.rate:      285,453 MB/sec
                 ·gc.alloc.rate.norm: 5405694,820 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            43,000 ms

Iteration   4: 18,210 ms/op
                 ·gc.alloc.rate:      283,086 MB/sec
                 ·gc.alloc.rate.norm: 5405694,986 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            36,000 ms

Iteration   5: 18,185 ms/op
                 ·gc.alloc.rate:      283,475 MB/sec
                 ·gc.alloc.rate.norm: 5405694,986 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            37,000 ms

Iteration   6: 18,029 ms/op
                 ·gc.alloc.rate:      285,922 MB/sec
                 ·gc.alloc.rate.norm: 5405738,849 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            38,000 ms

Iteration   7: 18,031 ms/op
                 ·gc.alloc.rate:      285,879 MB/sec
                 ·gc.alloc.rate.norm: 5405331,942 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            32,000 ms

Iteration   8: 17,875 ms/op
                 ·gc.alloc.rate:      288,369 MB/sec
                 ·gc.alloc.rate.norm: 5405174,577 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            41,000 ms

Iteration   9: 18,054 ms/op
                 ·gc.alloc.rate:      285,507 MB/sec
                 ·gc.alloc.rate.norm: 5404993,300 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            37,000 ms

Iteration  10: 17,907 ms/op
                 ·gc.alloc.rate:      287,825 MB/sec
                 ·gc.alloc.rate.norm: 5404581,893 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            43,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  18,077 ±(99.9%) 0,188 ms/op [Average]
  (min, avg, max) = (17,875, 18,077, 18,222), stdev = 0,124
  CI (99.9%): [17,889, 18,265] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  285,175 ±(99.9%) 2,951 MB/sec [Average]
  (min, avg, max) = (282,896, 285,175, 288,369), stdev = 1,952
  CI (99.9%): [282,224, 288,126] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  5405429,552 ±(99.9%) 602,922 B/op [Average]
  (min, avg, max) = (5404581,893, 5405429,552, 5405738,849), stdev = 398,795
  CI (99.9%): [5404826,631, 5406032,474] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  493,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (49,000, 49,300, 50,000), stdev = 0,483
  CI (99.9%): [493,000, 493,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  377,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (32,000, 37,700, 43,000), stdev = 3,743
  CI (99.9%): [377,000, 377,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 3, type = 2)

# Run progress: 66,67% complete, ETA 00:24:12
# Fork: 1 of 1
# Warmup Iteration   1: Size 14
26,474 ms/op
# Warmup Iteration   2: 22,045 ms/op
# Warmup Iteration   3: 21,732 ms/op
# Warmup Iteration   4: 21,746 ms/op
# Warmup Iteration   5: 21,404 ms/op
# Warmup Iteration   6: 21,248 ms/op
# Warmup Iteration   7: 20,938 ms/op
# Warmup Iteration   8: 21,105 ms/op
# Warmup Iteration   9: 21,436 ms/op
# Warmup Iteration  10: 21,376 ms/op
Iteration   1: 21,287 ms/op
                 ·gc.alloc.rate:      260,114 MB/sec
                 ·gc.alloc.rate.norm: 5806316,068 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            54,000 ms

Iteration   2: 21,268 ms/op
                 ·gc.alloc.rate:      260,345 MB/sec
                 ·gc.alloc.rate.norm: 5806316,068 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            46,000 ms

Iteration   3: 21,049 ms/op
                 ·gc.alloc.rate:      263,056 MB/sec
                 ·gc.alloc.rate.norm: 5806315,013 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            10,000 ms

Iteration   4: 21,098 ms/op
                 ·gc.alloc.rate:      262,455 MB/sec
                 ·gc.alloc.rate.norm: 5806315,361 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            45,000 ms

Iteration   5: 21,275 ms/op
                 ·gc.alloc.rate:      260,265 MB/sec
                 ·gc.alloc.rate.norm: 5806316,068 B/op
                 ·gc.count:           5,000 counts
                 ·gc.time:            51,000 ms

Iteration   6: 20,830 ms/op
                 ·gc.alloc.rate:      265,819 MB/sec
                 ·gc.alloc.rate.norm: 5806363,353 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            10,000 ms

Iteration   7: 21,218 ms/op
                 ·gc.alloc.rate:      260,967 MB/sec
                 ·gc.alloc.rate.norm: 5806315,848 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            45,000 ms

Iteration   8: 21,134 ms/op
                 ·gc.alloc.rate:      262,002 MB/sec
                 ·gc.alloc.rate.norm: 5806315,713 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            8,000 ms

Iteration   9: 20,958 ms/op
                 ·gc.alloc.rate:      264,198 MB/sec
                 ·gc.alloc.rate.norm: 5806315,013 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            39,000 ms

Iteration  10: 21,372 ms/op
                 ·gc.alloc.rate:      259,079 MB/sec
                 ·gc.alloc.rate.norm: 5806316,426 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            48,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  21,149 ±(99.9%) 0,254 ms/op [Average]
  (min, avg, max) = (20,830, 21,149, 21,372), stdev = 0,168
  CI (99.9%): [20,894, 21,403] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  261,830 ±(99.9%) 3,162 MB/sec [Average]
  (min, avg, max) = (259,079, 261,830, 265,819), stdev = 2,091
  CI (99.9%): [258,668, 264,991] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  5806320,493 ±(99.9%) 22,779 B/op [Average]
  (min, avg, max) = (5806315,013, 5806320,493, 5806363,353), stdev = 15,067
  CI (99.9%): [5806297,714, 5806343,272] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  34,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 3,400, 5,000), stdev = 1,350
  CI (99.9%): [34,000, 34,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  356,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8,000, 35,600, 54,000), stdev = 18,554
  CI (99.9%): [356,000, 356,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 3, type = 3)

# Run progress: 69,05% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: Size 15
1815,556 ms/op
# Warmup Iteration   2: 1472,339 ms/op
# Warmup Iteration   3: 1512,274 ms/op
# Warmup Iteration   4: 1434,773 ms/op
# Warmup Iteration   5: 1456,029 ms/op
# Warmup Iteration   6: 1448,326 ms/op
# Warmup Iteration   7: 1433,803 ms/op
# Warmup Iteration   8: 1448,269 ms/op
# Warmup Iteration   9: 1416,572 ms/op
# Warmup Iteration  10: 1431,159 ms/op
Iteration   1: 1435,672 ms/op
                 ·gc.alloc.rate:      238,933 MB/sec
                 ·gc.alloc.rate.norm: 359706764,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            93,000 ms

Iteration   2: 1432,005 ms/op
                 ·gc.alloc.rate:      239,545 MB/sec
                 ·gc.alloc.rate.norm: 359705684,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            90,000 ms

Iteration   3: 1437,973 ms/op
                 ·gc.alloc.rate:      238,551 MB/sec
                 ·gc.alloc.rate.norm: 359705684,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            94,000 ms

Iteration   4: 1449,309 ms/op
                 ·gc.alloc.rate:      236,686 MB/sec
                 ·gc.alloc.rate.norm: 359705684,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            103,000 ms

Iteration   5: 1464,541 ms/op
                 ·gc.alloc.rate:      234,226 MB/sec
                 ·gc.alloc.rate.norm: 359705684,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            102,000 ms

Iteration   6: 1470,135 ms/op
                 ·gc.alloc.rate:      233,322 MB/sec
                 ·gc.alloc.rate.norm: 359708638,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            105,000 ms

Iteration   7: 1471,204 ms/op
                 ·gc.alloc.rate:      233,163 MB/sec
                 ·gc.alloc.rate.norm: 359705696,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            110,000 ms

Iteration   8: 1434,680 ms/op
                 ·gc.alloc.rate:      239,090 MB/sec
                 ·gc.alloc.rate.norm: 359705684,000 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            20,000 ms

Iteration   9: 1436,077 ms/op
                 ·gc.alloc.rate:      238,856 MB/sec
                 ·gc.alloc.rate.norm: 359705692,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            106,000 ms

Iteration  10: 1442,175 ms/op
                 ·gc.alloc.rate:      237,856 MB/sec
                 ·gc.alloc.rate.norm: 359705684,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            85,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  1447,377 ±(99.9%) 23,431 ms/op [Average]
  (min, avg, max) = (1432,005, 1447,377, 1471,204), stdev = 15,498
  CI (99.9%): [1423,947, 1470,808] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  237,023 ±(99.9%) 3,811 MB/sec [Average]
  (min, avg, max) = (233,163, 237,023, 239,545), stdev = 2,521
  CI (99.9%): [233,211, 240,834] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  359706089,400 ±(99.9%) 1447,426 B/op [Average]
  (min, avg, max) = (359705684,000, 359706089,400, 359708638,000), stdev = 957,383
  CI (99.9%): [359704641,974, 359707536,826] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  27,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,700, 3,000), stdev = 0,675
  CI (99.9%): [27,000, 27,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  908,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (20,000, 90,800, 110,000), stdev = 26,114
  CI (99.9%): [908,000, 908,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 4, type = 1)

# Run progress: 71,43% complete, ETA 00:20:48
# Fork: 1 of 1
# Warmup Iteration   1: Size 18
22,567 ms/op
# Warmup Iteration   2: 19,908 ms/op
# Warmup Iteration   3: 19,868 ms/op
# Warmup Iteration   4: 20,023 ms/op
# Warmup Iteration   5: 19,678 ms/op
# Warmup Iteration   6: 19,996 ms/op
# Warmup Iteration   7: 19,661 ms/op
# Warmup Iteration   8: 19,631 ms/op
# Warmup Iteration   9: 19,550 ms/op
# Warmup Iteration  10: 19,797 ms/op
Iteration   1: 19,753 ms/op
                 ·gc.alloc.rate:      286,957 MB/sec
                 ·gc.alloc.rate.norm: 5943945,480 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            39,000 ms

Iteration   2: 19,719 ms/op
                 ·gc.alloc.rate:      287,461 MB/sec
                 ·gc.alloc.rate.norm: 5943945,380 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            35,000 ms

Iteration   3: 19,765 ms/op
                 ·gc.alloc.rate:      286,784 MB/sec
                 ·gc.alloc.rate.norm: 5943945,606 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            39,000 ms

Iteration   4: 19,666 ms/op
                 ·gc.alloc.rate:      288,234 MB/sec
                 ·gc.alloc.rate.norm: 5943945,380 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            36,000 ms

Iteration   5: 19,561 ms/op
                 ·gc.alloc.rate:      289,765 MB/sec
                 ·gc.alloc.rate.norm: 5943945,281 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            40,000 ms

Iteration   6: 19,579 ms/op
                 ·gc.alloc.rate:      289,495 MB/sec
                 ·gc.alloc.rate.norm: 5943992,809 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            36,000 ms

Iteration   7: 19,289 ms/op
                 ·gc.alloc.rate:      293,861 MB/sec
                 ·gc.alloc.rate.norm: 5943944,797 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            43,000 ms

Iteration   8: 19,443 ms/op
                 ·gc.alloc.rate:      291,533 MB/sec
                 ·gc.alloc.rate.norm: 5943763,690 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            38,000 ms

Iteration   9: 19,531 ms/op
                 ·gc.alloc.rate:      290,194 MB/sec
                 ·gc.alloc.rate.norm: 5943425,183 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            37,000 ms

Iteration  10: 19,631 ms/op
                 ·gc.alloc.rate:      288,719 MB/sec
                 ·gc.alloc.rate.norm: 5943425,380 B/op
                 ·gc.count:           50,000 counts
                 ·gc.time:            37,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  19,594 ±(99.9%) 0,224 ms/op [Average]
  (min, avg, max) = (19,289, 19,594, 19,765), stdev = 0,148
  CI (99.9%): [19,370, 19,818] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  289,300 ±(99.9%) 3,324 MB/sec [Average]
  (min, avg, max) = (286,784, 289,300, 293,861), stdev = 2,199
  CI (99.9%): [285,976, 292,625] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  5943827,899 ±(99.9%) 333,618 B/op [Average]
  (min, avg, max) = (5943425,183, 5943827,899, 5943992,809), stdev = 220,668
  CI (99.9%): [5943494,281, 5944161,517] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  497,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (48,000, 49,700, 50,000), stdev = 0,675
  CI (99.9%): [497,000, 497,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  380,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (35,000, 38,000, 43,000), stdev = 2,357
  CI (99.9%): [380,000, 380,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 4, type = 2)

# Run progress: 73,81% complete, ETA 00:19:03
# Fork: 1 of 1
# Warmup Iteration   1: Size 15
31,008 ms/op
# Warmup Iteration   2: 25,239 ms/op
# Warmup Iteration   3: 24,375 ms/op
# Warmup Iteration   4: 24,249 ms/op
# Warmup Iteration   5: 23,621 ms/op
# Warmup Iteration   6: 24,187 ms/op
# Warmup Iteration   7: 24,354 ms/op
# Warmup Iteration   8: 24,898 ms/op
# Warmup Iteration   9: 25,370 ms/op
# Warmup Iteration  10: 25,099 ms/op
Iteration   1: 24,220 ms/op
                 ·gc.alloc.rate:      254,122 MB/sec
                 ·gc.alloc.rate.norm: 6453916,908 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            36,000 ms

Iteration   2: 24,065 ms/op
                 ·gc.alloc.rate:      255,754 MB/sec
                 ·gc.alloc.rate.norm: 6453916,577 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            45,000 ms

Iteration   3: 23,830 ms/op
                 ·gc.alloc.rate:      258,276 MB/sec
                 ·gc.alloc.rate.norm: 6453914,995 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            6,000 ms

Iteration   4: 23,652 ms/op
                 ·gc.alloc.rate:      260,218 MB/sec
                 ·gc.alloc.rate.norm: 6453914,528 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            44,000 ms

Iteration   5: 23,800 ms/op
                 ·gc.alloc.rate:      258,585 MB/sec
                 ·gc.alloc.rate.norm: 6453914,995 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            41,000 ms

Iteration   6: 23,662 ms/op
                 ·gc.alloc.rate:      260,114 MB/sec
                 ·gc.alloc.rate.norm: 6454220,755 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            6,000 ms

Iteration   7: 23,473 ms/op
                 ·gc.alloc.rate:      262,199 MB/sec
                 ·gc.alloc.rate.norm: 6453913,607 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            45,000 ms

Iteration   8: 23,896 ms/op
                 ·gc.alloc.rate:      257,557 MB/sec
                 ·gc.alloc.rate.norm: 6453915,467 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            44,000 ms

Iteration   9: 23,603 ms/op
                 ·gc.alloc.rate:      260,760 MB/sec
                 ·gc.alloc.rate.norm: 6453914,216 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            7,000 ms

Iteration  10: 23,672 ms/op
                 ·gc.alloc.rate:      260,003 MB/sec
                 ·gc.alloc.rate.norm: 6453914,528 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            38,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  23,787 ±(99.9%) 0,341 ms/op [Average]
  (min, avg, max) = (23,473, 23,787, 24,220), stdev = 0,226
  CI (99.9%): [23,446, 24,128] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  258,759 ±(99.9%) 3,689 MB/sec [Average]
  (min, avg, max) = (254,122, 258,759, 262,199), stdev = 2,440
  CI (99.9%): [255,069, 262,448] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  6453945,658 ±(99.9%) 146,143 B/op [Average]
  (min, avg, max) = (6453913,607, 6453945,658, 6454220,755), stdev = 96,665
  CI (99.9%): [6453799,515, 6454091,801] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  22,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,919
  CI (99.9%): [22,000, 22,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  312,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6,000, 31,200, 45,000), stdev = 17,415
  CI (99.9%): [312,000, 312,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 4, type = 3)

# Run progress: 76,19% complete, ETA 00:17:18
# Fork: 1 of 1
# Warmup Iteration   1: Size 17
3263,261 ms/op
# Warmup Iteration   2: 2500,107 ms/op
# Warmup Iteration   3: 2413,930 ms/op
# Warmup Iteration   4: 2385,517 ms/op
# Warmup Iteration   5: 2376,736 ms/op
# Warmup Iteration   6: 2413,942 ms/op
# Warmup Iteration   7: 2425,525 ms/op
# Warmup Iteration   8: 2425,707 ms/op
# Warmup Iteration   9: 2423,399 ms/op
# Warmup Iteration  10: 2425,308 ms/op
Iteration   1: 2390,589 ms/op
                 ·gc.alloc.rate:      234,510 MB/sec
                 ·gc.alloc.rate.norm: 587868776,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            127,000 ms

Iteration   2: 2394,728 ms/op
                 ·gc.alloc.rate:      234,106 MB/sec
                 ·gc.alloc.rate.norm: 587868720,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            123,000 ms

Iteration   3: 2386,727 ms/op
                 ·gc.alloc.rate:      234,891 MB/sec
                 ·gc.alloc.rate.norm: 587868730,667 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            120,000 ms

Iteration   4: 2393,660 ms/op
                 ·gc.alloc.rate:      234,209 MB/sec
                 ·gc.alloc.rate.norm: 587868730,667 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            128,000 ms

Iteration   5: 2395,578 ms/op
                 ·gc.alloc.rate:      234,024 MB/sec
                 ·gc.alloc.rate.norm: 587868360,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            129,000 ms

Iteration   6: 2428,673 ms/op
                 ·gc.alloc.rate:      230,820 MB/sec
                 ·gc.alloc.rate.norm: 587871578,667 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            130,000 ms

Iteration   7: 2421,752 ms/op
                 ·gc.alloc.rate:      231,494 MB/sec
                 ·gc.alloc.rate.norm: 587867661,333 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            139,000 ms

Iteration   8: 2461,948 ms/op
                 ·gc.alloc.rate:      227,714 MB/sec
                 ·gc.alloc.rate.norm: 587867650,667 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            141,000 ms

Iteration   9: 2440,059 ms/op
                 ·gc.alloc.rate:      229,758 MB/sec
                 ·gc.alloc.rate.norm: 587867650,667 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            21,000 ms

Iteration  10: 2421,762 ms/op
                 ·gc.alloc.rate:      231,494 MB/sec
                 ·gc.alloc.rate.norm: 587867650,667 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            155,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  2413,548 ±(99.9%) 38,141 ms/op [Average]
  (min, avg, max) = (2386,727, 2413,548, 2461,948), stdev = 25,228
  CI (99.9%): [2375,407, 2451,689] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  232,302 ±(99.9%) 3,650 MB/sec [Average]
  (min, avg, max) = (227,714, 232,302, 234,891), stdev = 2,414
  CI (99.9%): [228,652, 235,952] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  587868550,933 ±(99.9%) 1786,744 B/op [Average]
  (min, avg, max) = (587867650,667, 587868550,933, 587871578,667), stdev = 1181,821
  CI (99.9%): [587866764,189, 587870337,677] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  28,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,800, 3,000), stdev = 0,632
  CI (99.9%): [28,000, 28,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  1213,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (21,000, 121,300, 155,000), stdev = 36,688
  CI (99.9%): [1213,000, 1213,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 5, type = 1)

# Run progress: 78,57% complete, ETA 00:15:45
# Fork: 1 of 1
# Warmup Iteration   1: Size 19
25,135 ms/op
# Warmup Iteration   2: 25,792 ms/op
# Warmup Iteration   3: 23,893 ms/op
# Warmup Iteration   4: 22,591 ms/op
# Warmup Iteration   5: 22,763 ms/op
# Warmup Iteration   6: 22,783 ms/op
# Warmup Iteration   7: 22,799 ms/op
# Warmup Iteration   8: 22,431 ms/op
# Warmup Iteration   9: 22,234 ms/op
# Warmup Iteration  10: 22,085 ms/op
Iteration   1: 22,922 ms/op
                 ·gc.alloc.rate:      269,542 MB/sec
                 ·gc.alloc.rate.norm: 6478854,466 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            28,000 ms

Iteration   2: 22,230 ms/op
                 ·gc.alloc.rate:      277,911 MB/sec
                 ·gc.alloc.rate.norm: 6478853,381 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            33,000 ms

Iteration   3: 22,528 ms/op
                 ·gc.alloc.rate:      274,202 MB/sec
                 ·gc.alloc.rate.norm: 6478853,776 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            29,000 ms

Iteration   4: 22,743 ms/op
                 ·gc.alloc.rate:      271,660 MB/sec
                 ·gc.alloc.rate.norm: 6478853,900 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            26,000 ms

Iteration   5: 32,805 ms/op
                 ·gc.alloc.rate:      188,343 MB/sec
                 ·gc.alloc.rate.norm: 6478867,399 B/op
                 ·gc.count:           32,000 counts
                 ·gc.time:            21,000 ms

Iteration   6: 23,738 ms/op
                 ·gc.alloc.rate:      260,266 MB/sec
                 ·gc.alloc.rate.norm: 6478912,906 B/op
                 ·gc.count:           45,000 counts
                 ·gc.time:            29,000 ms

Iteration   7: 23,190 ms/op
                 ·gc.alloc.rate:      266,421 MB/sec
                 ·gc.alloc.rate.norm: 6478854,452 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            27,000 ms

Iteration   8: 22,632 ms/op
                 ·gc.alloc.rate:      272,999 MB/sec
                 ·gc.alloc.rate.norm: 6478853,766 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            27,000 ms

Iteration   9: 25,683 ms/op
                 ·gc.alloc.rate:      240,569 MB/sec
                 ·gc.alloc.rate.norm: 6478857,887 B/op
                 ·gc.count:           41,000 counts
                 ·gc.time:            23,000 ms

Iteration  10: 22,348 ms/op
                 ·gc.alloc.rate:      276,472 MB/sec
                 ·gc.alloc.rate.norm: 6478853,369 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            29,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  24,082 ±(99.9%) 4,877 ms/op [Average]
  (min, avg, max) = (22,230, 24,082, 32,805), stdev = 3,226
  CI (99.9%): [19,205, 28,959] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  259,838 ±(99.9%) 41,383 MB/sec [Average]
  (min, avg, max) = (188,343, 259,838, 277,911), stdev = 27,372
  CI (99.9%): [218,455, 301,221] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  6478861,530 ±(99.9%) 28,054 B/op [Average]
  (min, avg, max) = (6478853,369, 6478861,530, 6478912,906), stdev = 18,556
  CI (99.9%): [6478833,477, 6478889,584] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  450,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (32,000, 45,000, 48,000), stdev = 5,033
  CI (99.9%): [450,000, 450,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  272,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (21,000, 27,200, 33,000), stdev = 3,360
  CI (99.9%): [272,000, 272,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 5, type = 2)

# Run progress: 80,95% complete, ETA 00:13:59
# Fork: 1 of 1
# Warmup Iteration   1: Size 16
50,513 ms/op
# Warmup Iteration   2: 42,116 ms/op
# Warmup Iteration   3: 45,344 ms/op
# Warmup Iteration   4: 49,253 ms/op
# Warmup Iteration   5: 29,483 ms/op
# Warmup Iteration   6: 27,963 ms/op
# Warmup Iteration   7: 28,774 ms/op
# Warmup Iteration   8: 27,254 ms/op
# Warmup Iteration   9: 30,661 ms/op
# Warmup Iteration  10: 34,742 ms/op
Iteration   1: 43,051 ms/op
                 ·gc.alloc.rate:      157,084 MB/sec
                 ·gc.alloc.rate.norm: 7091655,521 B/op
                 ·gc.count:           11,000 counts
                 ·gc.time:            56,000 ms

Iteration   2: 34,494 ms/op
                 ·gc.alloc.rate:      196,056 MB/sec
                 ·gc.alloc.rate.norm: 7091617,479 B/op
                 ·gc.count:           10,000 counts
                 ·gc.time:            17,000 ms

Iteration   3: 35,422 ms/op
                 ·gc.alloc.rate:      190,925 MB/sec
                 ·gc.alloc.rate.norm: 7091621,803 B/op
                 ·gc.count:           13,000 counts
                 ·gc.time:            26,000 ms

Iteration   4: 34,572 ms/op
                 ·gc.alloc.rate:      195,612 MB/sec
                 ·gc.alloc.rate.norm: 7091617,699 B/op
                 ·gc.count:           18,000 counts
                 ·gc.time:            56,000 ms

Iteration   5: 27,691 ms/op
                 ·gc.alloc.rate:      244,222 MB/sec
                 ·gc.alloc.rate.norm: 7091587,801 B/op
                 ·gc.count:           20,000 counts
                 ·gc.time:            63,000 ms

Iteration   6: 28,425 ms/op
                 ·gc.alloc.rate:      237,919 MB/sec
                 ·gc.alloc.rate.norm: 7091657,356 B/op
                 ·gc.count:           14,000 counts
                 ·gc.time:            21,000 ms

Iteration   7: 27,638 ms/op
                 ·gc.alloc.rate:      244,683 MB/sec
                 ·gc.alloc.rate.norm: 7091587,297 B/op
                 ·gc.count:           18,000 counts
                 ·gc.time:            60,000 ms

Iteration   8: 26,840 ms/op
                 ·gc.alloc.rate:      251,965 MB/sec
                 ·gc.alloc.rate.norm: 7091583,829 B/op
                 ·gc.count:           10,000 counts
                 ·gc.time:            21,000 ms

Iteration   9: 27,953 ms/op
                 ·gc.alloc.rate:      241,934 MB/sec
                 ·gc.alloc.rate.norm: 7091588,667 B/op
                 ·gc.count:           14,000 counts
                 ·gc.time:            62,000 ms

Iteration  10: 27,887 ms/op
                 ·gc.alloc.rate:      242,507 MB/sec
                 ·gc.alloc.rate.norm: 7091588,489 B/op
                 ·gc.count:           16,000 counts
                 ·gc.time:            28,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  31,397 ±(99.9%) 8,021 ms/op [Average]
  (min, avg, max) = (26,840, 31,397, 43,051), stdev = 5,305
  CI (99.9%): [23,376, 39,418] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  220,291 ±(99.9%) 49,113 MB/sec [Average]
  (min, avg, max) = (157,084, 220,291, 251,965), stdev = 32,485
  CI (99.9%): [171,178, 269,404] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  7091610,594 ±(99.9%) 42,693 B/op [Average]
  (min, avg, max) = (7091583,829, 7091610,594, 7091657,356), stdev = 28,239
  CI (99.9%): [7091567,901, 7091653,287] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  144,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (10,000, 14,400, 20,000), stdev = 3,534
  CI (99.9%): [144,000, 144,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  410,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (17,000, 41,000, 63,000), stdev = 19,737
  CI (99.9%): [410,000, 410,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 5, type = 3)

# Run progress: 83,33% complete, ETA 00:12:13
# Fork: 1 of 1
# Warmup Iteration   1: Size 19
5691,251 ms/op
# Warmup Iteration   2: 4222,817 ms/op
# Warmup Iteration   3: 4206,536 ms/op
# Warmup Iteration   4: 5517,795 ms/op
# Warmup Iteration   5: 5788,872 ms/op
# Warmup Iteration   6: 4257,264 ms/op
# Warmup Iteration   7: 4052,988 ms/op
# Warmup Iteration   8: 4133,606 ms/op
# Warmup Iteration   9: 3961,384 ms/op
# Warmup Iteration  10: 4080,932 ms/op
Iteration   1: 4188,832 ms/op
                 ·gc.alloc.rate:      203,180 MB/sec
                 ·gc.alloc.rate.norm: 892448812,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            186,000 ms

Iteration   2: 4319,491 ms/op
                 ·gc.alloc.rate:      197,029 MB/sec
                 ·gc.alloc.rate.norm: 892432180,000 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            15,000 ms

Iteration   3: 4295,168 ms/op
                 ·gc.alloc.rate:      198,147 MB/sec
                 ·gc.alloc.rate.norm: 892432180,000 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            209,000 ms

Iteration   4: 4250,923 ms/op
                 ·gc.alloc.rate:      200,209 MB/sec
                 ·gc.alloc.rate.norm: 892432180,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            205,000 ms

Iteration   5: 4171,896 ms/op
                 ·gc.alloc.rate:      204,002 MB/sec
                 ·gc.alloc.rate.norm: 892432180,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            71,000 ms

Iteration   6: 3905,450 ms/op
                 ·gc.alloc.rate:      217,910 MB/sec
                 ·gc.alloc.rate.norm: 892438156,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            190,000 ms

Iteration   7: 4137,496 ms/op
                 ·gc.alloc.rate:      205,695 MB/sec
                 ·gc.alloc.rate.norm: 892432372,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            216,000 ms

Iteration   8: 3966,761 ms/op
                 ·gc.alloc.rate:      214,550 MB/sec
                 ·gc.alloc.rate.norm: 892432164,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            68,000 ms

Iteration   9: 4130,164 ms/op
                 ·gc.alloc.rate:      206,063 MB/sec
                 ·gc.alloc.rate.norm: 892432444,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            194,000 ms

Iteration  10: 4246,251 ms/op
                 ·gc.alloc.rate:      200,429 MB/sec
                 ·gc.alloc.rate.norm: 892432164,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            200,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  4161,243 ±(99.9%) 204,026 ms/op [Average]
  (min, avg, max) = (3905,450, 4161,243, 4319,491), stdev = 134,950
  CI (99.9%): [3957,217, 4365,269] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  204,722 ±(99.9%) 10,295 MB/sec [Average]
  (min, avg, max) = (197,029, 204,722, 217,910), stdev = 6,810
  CI (99.9%): [194,426, 215,017] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  892434483,200 ±(99.9%) 8116,541 B/op [Average]
  (min, avg, max) = (892432164,000, 892434483,200, 892448812,000), stdev = 5368,589
  CI (99.9%): [892426366,659, 892442599,741] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  27,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,700, 4,000), stdev = 0,823
  CI (99.9%): [27,000, 27,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  1554,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (15,000, 155,400, 216,000), stdev = 73,856
  CI (99.9%): [1554,000, 1554,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 6, type = 1)

# Run progress: 85,71% complete, ETA 00:10:38
# Fork: 1 of 1
# Warmup Iteration   1: Size 20
29,899 ms/op
# Warmup Iteration   2: 24,892 ms/op
# Warmup Iteration   3: 24,999 ms/op
# Warmup Iteration   4: 25,357 ms/op
# Warmup Iteration   5: 24,686 ms/op
# Warmup Iteration   6: 24,681 ms/op
# Warmup Iteration   7: 24,465 ms/op
# Warmup Iteration   8: 24,007 ms/op
# Warmup Iteration   9: 24,094 ms/op
# Warmup Iteration  10: 24,036 ms/op
Iteration   1: 24,183 ms/op
                 ·gc.alloc.rate:      278,281 MB/sec
                 ·gc.alloc.rate.norm: 7057312,538 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            31,000 ms

Iteration   2: 24,215 ms/op
                 ·gc.alloc.rate:      277,926 MB/sec
                 ·gc.alloc.rate.norm: 7057312,541 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            31,000 ms

Iteration   3: 23,982 ms/op
                 ·gc.alloc.rate:      280,627 MB/sec
                 ·gc.alloc.rate.norm: 7057312,230 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   4: 24,423 ms/op
                 ·gc.alloc.rate:      275,564 MB/sec
                 ·gc.alloc.rate.norm: 7057312,859 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            29,000 ms

Iteration   5: 24,255 ms/op
                 ·gc.alloc.rate:      277,473 MB/sec
                 ·gc.alloc.rate.norm: 7057312,541 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            30,000 ms

Iteration   6: 24,163 ms/op
                 ·gc.alloc.rate:      278,521 MB/sec
                 ·gc.alloc.rate.norm: 7057371,231 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            32,000 ms

Iteration   7: 24,416 ms/op
                 ·gc.alloc.rate:      275,625 MB/sec
                 ·gc.alloc.rate.norm: 7057312,859 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            28,000 ms

Iteration   8: 24,231 ms/op
                 ·gc.alloc.rate:      277,743 MB/sec
                 ·gc.alloc.rate.norm: 7057312,541 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            30,000 ms

Iteration   9: 24,270 ms/op
                 ·gc.alloc.rate:      277,301 MB/sec
                 ·gc.alloc.rate.norm: 7057312,541 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            34,000 ms

Iteration  10: 23,882 ms/op
                 ·gc.alloc.rate:      281,811 MB/sec
                 ·gc.alloc.rate.norm: 7057312,076 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            30,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  24,202 ±(99.9%) 0,255 ms/op [Average]
  (min, avg, max) = (23,882, 24,202, 24,423), stdev = 0,169
  CI (99.9%): [23,947, 24,457] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  278,087 ±(99.9%) 2,944 MB/sec [Average]
  (min, avg, max) = (275,564, 278,087, 281,811), stdev = 1,947
  CI (99.9%): [275,144, 281,031] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  7057318,396 ±(99.9%) 28,069 B/op [Average]
  (min, avg, max) = (7057312,076, 7057318,396, 7057371,231), stdev = 18,566
  CI (99.9%): [7057290,327, 7057346,465] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  481,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (47,000, 48,100, 49,000), stdev = 0,738
  CI (99.9%): [481,000, 481,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  309,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (28,000, 30,900, 34,000), stdev = 1,969
  CI (99.9%): [309,000, 309,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 6, type = 2)

# Run progress: 88,10% complete, ETA 00:08:50
# Fork: 1 of 1
# Warmup Iteration   1: Size 17
37,750 ms/op
# Warmup Iteration   2: 30,578 ms/op
# Warmup Iteration   3: 29,480 ms/op
# Warmup Iteration   4: 29,723 ms/op
# Warmup Iteration   5: 28,991 ms/op
# Warmup Iteration   6: 30,180 ms/op
# Warmup Iteration   7: 29,041 ms/op
# Warmup Iteration   8: 28,973 ms/op
# Warmup Iteration   9: 28,819 ms/op
# Warmup Iteration  10: 29,104 ms/op
Iteration   1: 30,731 ms/op
                 ·gc.alloc.rate:      239,600 MB/sec
                 ·gc.alloc.rate.norm: 7721096,687 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            52,000 ms

Iteration   2: 28,796 ms/op
                 ·gc.alloc.rate:      255,703 MB/sec
                 ·gc.alloc.rate.norm: 7721087,034 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            7,000 ms

Iteration   3: 28,694 ms/op
                 ·gc.alloc.rate:      256,597 MB/sec
                 ·gc.alloc.rate.norm: 7721086,217 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            39,000 ms

Iteration   4: 29,167 ms/op
                 ·gc.alloc.rate:      252,459 MB/sec
                 ·gc.alloc.rate.norm: 7721399,860 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            46,000 ms

Iteration   5: 28,637 ms/op
                 ·gc.alloc.rate:      257,120 MB/sec
                 ·gc.alloc.rate.norm: 7721085,591 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            7,000 ms

Iteration   6: 29,412 ms/op
                 ·gc.alloc.rate:      250,331 MB/sec
                 ·gc.alloc.rate.norm: 7721158,643 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            37,000 ms

Iteration   7: 29,602 ms/op
                 ·gc.alloc.rate:      248,735 MB/sec
                 ·gc.alloc.rate.norm: 7721090,588 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            45,000 ms

Iteration   8: 30,008 ms/op
                 ·gc.alloc.rate:      245,369 MB/sec
                 ·gc.alloc.rate.norm: 7721092,143 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            8,000 ms

Iteration   9: 29,610 ms/op
                 ·gc.alloc.rate:      248,674 MB/sec
                 ·gc.alloc.rate.norm: 7721090,588 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            40,000 ms

Iteration  10: 31,019 ms/op
                 ·gc.alloc.rate:      237,378 MB/sec
                 ·gc.alloc.rate.norm: 7721097,827 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            48,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  29,567 ±(99.9%) 1,241 ms/op [Average]
  (min, avg, max) = (28,637, 29,567, 31,019), stdev = 0,821
  CI (99.9%): [28,326, 30,809] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  249,197 ±(99.9%) 10,312 MB/sec [Average]
  (min, avg, max) = (237,378, 249,197, 257,120), stdev = 6,821
  CI (99.9%): [238,885, 259,509] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  7721128,518 ±(99.9%) 147,825 B/op [Average]
  (min, avg, max) = (7721085,591, 7721128,518, 7721399,860), stdev = 97,777
  CI (99.9%): [7720980,693, 7721276,343] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  22,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,200, 4,000), stdev = 1,033
  CI (99.9%): [22,000, 22,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  329,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7,000, 32,900, 52,000), stdev = 18,187
  CI (99.9%): [329,000, 329,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 6, type = 3)

# Run progress: 90,48% complete, ETA 00:07:04
# Fork: 1 of 1
# Warmup Iteration   1: Size 21
8240,500 ms/op
# Warmup Iteration   2: 5706,011 ms/op
# Warmup Iteration   3: 5793,693 ms/op
# Warmup Iteration   4: 5601,140 ms/op
# Warmup Iteration   5: 5402,321 ms/op
# Warmup Iteration   6: 5758,337 ms/op
# Warmup Iteration   7: 5689,254 ms/op
# Warmup Iteration   8: 5753,582 ms/op
# Warmup Iteration   9: 5691,232 ms/op
# Warmup Iteration  10: 5371,392 ms/op
Iteration   1: 5446,249 ms/op
                 ·gc.alloc.rate:      226,042 MB/sec
                 ·gc.alloc.rate.norm: 1290916680,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            175,000 ms

Iteration   2: 5697,628 ms/op
                 ·gc.alloc.rate:      216,066 MB/sec
                 ·gc.alloc.rate.norm: 1290910640,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            188,000 ms

Iteration   3: 5996,444 ms/op
                 ·gc.alloc.rate:      205,301 MB/sec
                 ·gc.alloc.rate.norm: 1290911152,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            208,000 ms

Iteration   4: 5939,005 ms/op
                 ·gc.alloc.rate:      207,286 MB/sec
                 ·gc.alloc.rate.norm: 1290911224,000 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            26,000 ms

Iteration   5: 6484,128 ms/op
                 ·gc.alloc.rate:      189,859 MB/sec
                 ·gc.alloc.rate.norm: 1290910288,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            220,000 ms

Iteration   6: 5740,817 ms/op
                 ·gc.alloc.rate:      214,488 MB/sec
                 ·gc.alloc.rate.norm: 1291252512,000 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            28,000 ms

Iteration   7: 5968,200 ms/op
                 ·gc.alloc.rate:      206,270 MB/sec
                 ·gc.alloc.rate.norm: 1290904080,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            234,000 ms

Iteration   8: 5827,242 ms/op
                 ·gc.alloc.rate:      211,257 MB/sec
                 ·gc.alloc.rate.norm: 1290891600,000 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            28,000 ms

Iteration   9: 6599,633 ms/op
                 ·gc.alloc.rate:      186,535 MB/sec
                 ·gc.alloc.rate.norm: 1290892176,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            245,000 ms

Iteration  10: 7681,053 ms/op
                 ·gc.alloc.rate:      160,273 MB/sec
                 ·gc.alloc.rate.norm: 1290891888,000 B/op
                 ·gc.count:           1,000 counts
                 ·gc.time:            32,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  6138,040 ±(99.9%) 973,185 ms/op [Average]
  (min, avg, max) = (5446,249, 6138,040, 7681,053), stdev = 643,701
  CI (99.9%): [5164,855, 7111,225] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  202,338 ±(99.9%) 28,513 MB/sec [Average]
  (min, avg, max) = (160,273, 202,338, 226,042), stdev = 18,860
  CI (99.9%): [173,825, 230,851] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  1290939224,000 ±(99.9%) 167021,527 B/op [Average]
  (min, avg, max) = (1290891600,000, 1290939224,000, 1291252512,000), stdev = 110474,399
  CI (99.9%): [1290772202,473, 1291106245,527] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  22,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,200, 3,000), stdev = 1,033
  CI (99.9%): [22,000, 22,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  1384,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (26,000, 138,400, 245,000), stdev = 96,688
  CI (99.9%): [1384,000, 1384,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 7, type = 1)

# Run progress: 92,86% complete, ETA 00:05:19
# Fork: 1 of 1
# Warmup Iteration   1: Size 21
34,955 ms/op
# Warmup Iteration   2: 27,457 ms/op
# Warmup Iteration   3: 26,742 ms/op
# Warmup Iteration   4: 28,285 ms/op
# Warmup Iteration   5: 26,938 ms/op
# Warmup Iteration   6: 30,416 ms/op
# Warmup Iteration   7: 27,734 ms/op
# Warmup Iteration   8: 26,697 ms/op
# Warmup Iteration   9: 26,457 ms/op
# Warmup Iteration  10: 26,636 ms/op
Iteration   1: 27,095 ms/op
                 ·gc.alloc.rate:      267,334 MB/sec
                 ·gc.alloc.rate.norm: 7595517,146 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            28,000 ms

Iteration   2: 28,051 ms/op
                 ·gc.alloc.rate:      258,221 MB/sec
                 ·gc.alloc.rate.norm: 7595518,391 B/op
                 ·gc.count:           44,000 counts
                 ·gc.time:            26,000 ms

Iteration   3: 26,656 ms/op
                 ·gc.alloc.rate:      271,748 MB/sec
                 ·gc.alloc.rate.norm: 7595972,809 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            30,000 ms

Iteration   4: 26,660 ms/op
                 ·gc.alloc.rate:      271,691 MB/sec
                 ·gc.alloc.rate.norm: 7595516,553 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            26,000 ms

Iteration   5: 26,065 ms/op
                 ·gc.alloc.rate:      277,901 MB/sec
                 ·gc.alloc.rate.norm: 7595519,458 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            28,000 ms

Iteration   6: 26,559 ms/op
                 ·gc.alloc.rate:      272,712 MB/sec
                 ·gc.alloc.rate.norm: 7595581,122 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            32,000 ms

Iteration   7: 25,839 ms/op
                 ·gc.alloc.rate:      280,325 MB/sec
                 ·gc.alloc.rate.norm: 7595515,588 B/op
                 ·gc.count:           49,000 counts
                 ·gc.time:            34,000 ms

Iteration   8: 26,328 ms/op
                 ·gc.alloc.rate:      275,122 MB/sec
                 ·gc.alloc.rate.norm: 7595515,979 B/op
                 ·gc.count:           48,000 counts
                 ·gc.time:            30,000 ms

Iteration   9: 26,444 ms/op
                 ·gc.alloc.rate:      273,913 MB/sec
                 ·gc.alloc.rate.norm: 7595516,337 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            28,000 ms

Iteration  10: 26,945 ms/op
                 ·gc.alloc.rate:      268,818 MB/sec
                 ·gc.alloc.rate.norm: 7595516,946 B/op
                 ·gc.count:           47,000 counts
                 ·gc.time:            29,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  26,664 ±(99.9%) 0,929 ms/op [Average]
  (min, avg, max) = (25,839, 26,664, 28,051), stdev = 0,615
  CI (99.9%): [25,735, 27,594] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  271,779 ±(99.9%) 9,285 MB/sec [Average]
  (min, avg, max) = (258,221, 271,779, 280,325), stdev = 6,141
  CI (99.9%): [262,494, 281,064] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  7595569,033 ±(99.9%) 216,647 B/op [Average]
  (min, avg, max) = (7595515,588, 7595569,033, 7595972,809), stdev = 143,299
  CI (99.9%): [7595352,386, 7595785,680] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  471,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (44,000, 47,100, 49,000), stdev = 1,287
  CI (99.9%): [471,000, 471,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  291,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (26,000, 29,100, 34,000), stdev = 2,514
  CI (99.9%): [291,000, 291,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 7, type = 2)

# Run progress: 95,24% complete, ETA 00:03:32
# Fork: 1 of 1
# Warmup Iteration   1: Size 18
40,775 ms/op
# Warmup Iteration   2: 32,901 ms/op
# Warmup Iteration   3: 32,049 ms/op
# Warmup Iteration   4: 32,041 ms/op
# Warmup Iteration   5: 32,276 ms/op
# Warmup Iteration   6: 30,371 ms/op
# Warmup Iteration   7: 32,537 ms/op
# Warmup Iteration   8: 30,479 ms/op
# Warmup Iteration   9: 30,183 ms/op
# Warmup Iteration  10: 31,030 ms/op
Iteration   1: 30,946 ms/op
                 ·gc.alloc.rate:      255,939 MB/sec
                 ·gc.alloc.rate.norm: 8305531,387 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            11,000 ms

Iteration   2: 32,420 ms/op
                 ·gc.alloc.rate:      244,304 MB/sec
                 ·gc.alloc.rate.norm: 8305540,026 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            71,000 ms

Iteration   3: 30,416 ms/op
                 ·gc.alloc.rate:      260,404 MB/sec
                 ·gc.alloc.rate.norm: 8305529,406 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            20,000 ms

Iteration   4: 32,470 ms/op
                 ·gc.alloc.rate:      243,933 MB/sec
                 ·gc.alloc.rate.norm: 8305540,026 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            60,000 ms

Iteration   5: 32,496 ms/op
                 ·gc.alloc.rate:      243,737 MB/sec
                 ·gc.alloc.rate.norm: 8305539,819 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            15,000 ms

Iteration   6: 31,309 ms/op
                 ·gc.alloc.rate:      252,969 MB/sec
                 ·gc.alloc.rate.norm: 8305608,300 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            62,000 ms

Iteration   7: 31,410 ms/op
                 ·gc.alloc.rate:      252,163 MB/sec
                 ·gc.alloc.rate.norm: 8305534,650 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            26,000 ms

Iteration   8: 30,302 ms/op
                 ·gc.alloc.rate:      261,384 MB/sec
                 ·gc.alloc.rate.norm: 8305528,434 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            56,000 ms

Iteration   9: 33,081 ms/op
                 ·gc.alloc.rate:      239,428 MB/sec
                 ·gc.alloc.rate.norm: 8305543,211 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            30,000 ms

Iteration  10: 31,657 ms/op
                 ·gc.alloc.rate:      250,198 MB/sec
                 ·gc.alloc.rate.norm: 8305535,698 B/op
                 ·gc.count:           4,000 counts
                 ·gc.time:            52,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  31,651 ±(99.9%) 1,429 ms/op [Average]
  (min, avg, max) = (30,302, 31,651, 33,081), stdev = 0,945
  CI (99.9%): [30,222, 33,079] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  250,446 ±(99.9%) 11,324 MB/sec [Average]
  (min, avg, max) = (239,428, 250,446, 261,384), stdev = 7,490
  CI (99.9%): [239,122, 261,770] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  8305543,096 ±(99.9%) 35,445 B/op [Average]
  (min, avg, max) = (8305528,434, 8305543,096, 8305608,300), stdev = 23,444
  CI (99.9%): [8305507,651, 8305578,540] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  33,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (2,000, 3,300, 4,000), stdev = 0,823
  CI (99.9%): [33,000, 33,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  403,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11,000, 40,300, 71,000), stdev = 22,126
  CI (99.9%): [403,000, 403,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 5 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.LazyGraphTraversalBenchmark.findMethods
# Parameters: (edgeGenMode = 2, size = 7, type = 3)

# Run progress: 97,62% complete, ETA 00:01:46
# Fork: 1 of 1
# Warmup Iteration   1: Size 23
9324,535 ms/op
# Warmup Iteration   2: 8219,608 ms/op
# Warmup Iteration   3: 8002,090 ms/op
# Warmup Iteration   4: 7898,102 ms/op
# Warmup Iteration   5: 8016,576 ms/op
# Warmup Iteration   6: 8038,673 ms/op
# Warmup Iteration   7: 8214,342 ms/op
# Warmup Iteration   8: 8576,806 ms/op
# Warmup Iteration   9: 8149,471 ms/op
# Warmup Iteration  10: 8446,881 ms/op
Iteration   1: 8246,978 ms/op
                 ·gc.alloc.rate:      206,904 MB/sec
                 ·gc.alloc.rate.norm: 1789254952,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            73,000 ms

Iteration   2: 8261,366 ms/op
                 ·gc.alloc.rate:      206,542 MB/sec
                 ·gc.alloc.rate.norm: 1789254408,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            309,000 ms

Iteration   3: 8230,300 ms/op
                 ·gc.alloc.rate:      207,322 MB/sec
                 ·gc.alloc.rate.norm: 1789254664,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            72,000 ms

Iteration   4: 8229,341 ms/op
                 ·gc.alloc.rate:      207,346 MB/sec
                 ·gc.alloc.rate.norm: 1789253816,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            309,000 ms

Iteration   5: 8247,980 ms/op
                 ·gc.alloc.rate:      206,876 MB/sec
                 ·gc.alloc.rate.norm: 1789232864,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            72,000 ms

Iteration   6: 8298,616 ms/op
                 ·gc.alloc.rate:      205,622 MB/sec
                 ·gc.alloc.rate.norm: 1789430648,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            315,000 ms

Iteration   7: 8106,905 ms/op
                 ·gc.alloc.rate:      210,476 MB/sec
                 ·gc.alloc.rate.norm: 1789234592,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            72,000 ms

Iteration   8: 8206,953 ms/op
                 ·gc.alloc.rate:      207,909 MB/sec
                 ·gc.alloc.rate.norm: 1789232304,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            304,000 ms

Iteration   9: 8140,502 ms/op
                 ·gc.alloc.rate:      209,607 MB/sec
                 ·gc.alloc.rate.norm: 1789232160,000 B/op
                 ·gc.count:           2,000 counts
                 ·gc.time:            73,000 ms

Iteration  10: 8183,737 ms/op
                 ·gc.alloc.rate:      208,500 MB/sec
                 ·gc.alloc.rate.norm: 1789233568,000 B/op
                 ·gc.count:           3,000 counts
                 ·gc.time:            302,000 ms



Result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods":
  8215,268 ±(99.9%) 87,240 ms/op [Average]
  (min, avg, max) = (8106,905, 8215,268, 8298,616), stdev = 57,704
  CI (99.9%): [8128,028, 8302,507] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate":
  207,710 ±(99.9%) 2,212 MB/sec [Average]
  (min, avg, max) = (205,622, 207,710, 210,476), stdev = 1,463
  CI (99.9%): [205,499, 209,922] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm":
  1789261397,600 ±(99.9%) 91335,576 B/op [Average]
  (min, avg, max) = (1789232160,000, 1789261397,600, 1789430648,000), stdev = 60412,828
  CI (99.9%): [1789170062,024, 1789352733,176] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.count":
  25,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (2,000, 2,500, 3,000), stdev = 0,527
  CI (99.9%): [25,000, 25,000] (assumes normal distribution)

Secondary result "org.codegenerator.LazyGraphTraversalBenchmark.findMethods:·gc.time":
  1901,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (72,000, 190,100, 315,000), stdev = 124,113
  CI (99.9%): [1901,000, 1901,000] (assumes normal distribution)


# Run complete. Total time: 01:15:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (edgeGenMode)  (size)  (type)  Mode  Cnt           Score        Error   Units
LazyGraphTraversalBenchmark.findMethods                                  1       1       1  avgt   10           6,067 ±      0,037   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       1       1  avgt   10         274,669 ±      1,699  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       1       1  avgt   10     1747461,700 ±    221,274    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       1       1  avgt   10         474,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       1       1  avgt   10         315,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       1       2  avgt   10           5,912 ±      0,021   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       1       2  avgt   10         273,754 ±      0,997  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       1       2  avgt   10     1697212,901 ±      6,888    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       1       2  avgt   10         473,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       1       2  avgt   10         322,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       1       3  avgt   10         149,589 ±     27,015   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       1       3  avgt   10         243,806 ±     42,461  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       1       3  avgt   10    37772616,263 ±   1202,388    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       1       3  avgt   10         324,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       1       3  avgt   10         437,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       2       1  avgt   10           6,846 ±      0,139   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       2       1  avgt   10         275,655 ±      5,555  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       2       1  avgt   10     1978522,226 ±      8,091    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       2       1  avgt   10         477,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       2       1  avgt   10         321,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       2       2  avgt   10           6,513 ±      0,051   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       2       2  avgt   10         281,094 ±      2,191  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       2       2  avgt   10     1919585,128 ±      7,719    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       2       2  avgt   10         486,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       2       2  avgt   10         356,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       2       3  avgt   10         265,639 ±      2,574   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       2       3  avgt   10         279,964 ±      2,706  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       2       3  avgt   10    77982876,444 ±   1753,543    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       2       3  avgt   10         187,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       2       3  avgt   10         451,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       3       1  avgt   10           7,619 ±      0,115   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       3       1  avgt   10         276,702 ±      4,170  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       3       1  avgt   10     2210657,961 ±    331,711    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       3       1  avgt   10         477,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       3       1  avgt   10         347,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       3       2  avgt   10           7,374 ±      0,054   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       3       2  avgt   10         278,330 ±      2,025  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       3       2  avgt   10     2152134,922 ±      8,551    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       3       2  avgt   10         481,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       3       2  avgt   10         345,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       3       3  avgt   10         483,795 ±      4,389   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       3       3  avgt   10         277,822 ±      2,518  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       3       3  avgt   10   140940636,436 ±   1892,633    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       3       3  avgt   10         129,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       3       3  avgt   10         540,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       4       1  avgt   10           8,493 ±      0,227   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       4       1  avgt   10         274,224 ±      7,280  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       4       1  avgt   10     2441629,117 ±      9,687    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       4       1  avgt   10         474,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       4       1  avgt   10         312,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       4       2  avgt   10           8,173 ±      0,076   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       4       2  avgt   10         278,215 ±      2,604  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       4       2  avgt   10     2384445,381 ±      9,586    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       4       2  avgt   10         474,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       4       2  avgt   10         339,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       4       3  avgt   10         783,608 ±     11,486   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       4       3  avgt   10         278,708 ±      4,069  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       4       3  avgt   10   228997922,400 ±   2428,376    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       4       3  avgt   10          80,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       4       3  avgt   10         585,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       5       1  avgt   10           9,111 ±      0,143   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       5       1  avgt   10         279,802 ±      4,349  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       5       1  avgt   10     2672852,889 ±    325,293    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       5       1  avgt   10         484,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       5       1  avgt   10         343,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       5       2  avgt   10           8,915 ±      0,063   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       5       2  avgt   10         279,841 ±      1,998  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       5       2  avgt   10     2615982,255 ±    513,464    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       5       2  avgt   10         484,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       5       2  avgt   10         346,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       5       3  avgt   10        1215,197 ±     13,106   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       5       3  avgt   10         277,669 ±      2,986  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       5       3  avgt   10   353812635,840 ±   3275,025    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       5       3  avgt   10          61,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       5       3  avgt   10         651,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       6       1  avgt   10          10,104 ±      0,093   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       6       1  avgt   10         274,185 ±      2,501  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       6       1  avgt   10     2904866,057 ±     13,137    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       6       1  avgt   10         474,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       6       1  avgt   10         327,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       6       2  avgt   10           9,682 ±      0,110   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       6       2  avgt   10         280,563 ±      3,209  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       6       2  avgt   10     2848475,480 ±     12,436    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       6       2  avgt   10         485,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       6       2  avgt   10         357,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       6       3  avgt   10        1725,131 ±     23,142   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       6       3  avgt   10         279,207 ±      3,732  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       6       3  avgt   10   505053207,200 ±  10129,474    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       6       3  avgt   10          36,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       6       3  avgt   10         542,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       7       1  avgt   10          10,718 ±      0,233   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       7       1  avgt   10         279,085 ±      5,914  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       7       1  avgt   10     3136026,863 ±    334,052    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       7       1  avgt   10         483,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       7       1  avgt   10         355,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       7       2  avgt   10          13,175 ±      3,014   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       7       2  avgt   10         226,987 ±     45,252  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       7       2  avgt   10     3080179,400 ±     18,765    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       7       2  avgt   10         366,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       7       2  avgt   10         282,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  1       7       3  avgt   10        2433,292 ±     79,822   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   1       7       3  avgt   10         274,968 ±      8,695  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              1       7       3  avgt   10   701321337,733 ±   2673,250    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        1       7       3  avgt   10          30,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         1       7       3  avgt   10         649,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       1       1  avgt   10          14,410 ±      0,171   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       1       1  avgt   10         286,849 ±      3,342  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       1       1  avgt   10     4334396,207 ±    797,491    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       1       1  avgt   10         496,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       1       1  avgt   10         363,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       1       2  avgt   10          16,231 ±      0,600   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       1       2  avgt   10         267,432 ±      9,600  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       1       2  avgt   10     4549706,969 ±     84,002    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       1       2  avgt   10          62,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       1       2  avgt   10         372,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       1       3  avgt   10         381,980 ±      4,128   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       1       3  avgt   10         240,610 ±      2,609  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       1       3  avgt   10    96373217,380 ±   1941,605    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       1       3  avgt   10          27,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       1       3  avgt   10         631,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       2       1  avgt   10          16,131 ±      0,192   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       2       1  avgt   10         287,895 ±      3,395  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       2       1  avgt   10     4869517,193 ±   1177,520    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       2       1  avgt   10         496,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       2       1  avgt   10         371,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       2       2  avgt   10          18,541 ±      0,358   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       2       2  avgt   10         268,300 ±      5,110  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       2       2  avgt   10     5215652,904 ±     21,268    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       2       2  avgt   10          62,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       2       2  avgt   10         406,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       2       3  avgt   10         799,546 ±      9,194   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       2       3  avgt   10         238,942 ±      2,735  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       2       3  avgt   10   200323743,657 ±    805,818    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       2       3  avgt   10          27,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       2       3  avgt   10         749,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       3       1  avgt   10          18,077 ±      0,188   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       3       1  avgt   10         285,175 ±      2,951  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       3       1  avgt   10     5405429,552 ±    602,922    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       3       1  avgt   10         493,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       3       1  avgt   10         377,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       3       2  avgt   10          21,149 ±      0,254   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       3       2  avgt   10         261,830 ±      3,162  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       3       2  avgt   10     5806320,493 ±     22,779    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       3       2  avgt   10          34,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       3       2  avgt   10         356,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       3       3  avgt   10        1447,377 ±     23,431   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       3       3  avgt   10         237,023 ±      3,811  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       3       3  avgt   10   359706089,400 ±   1447,426    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       3       3  avgt   10          27,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       3       3  avgt   10         908,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       4       1  avgt   10          19,594 ±      0,224   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       4       1  avgt   10         289,300 ±      3,324  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       4       1  avgt   10     5943827,899 ±    333,618    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       4       1  avgt   10         497,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       4       1  avgt   10         380,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       4       2  avgt   10          23,787 ±      0,341   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       4       2  avgt   10         258,759 ±      3,689  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       4       2  avgt   10     6453945,658 ±    146,143    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       4       2  avgt   10          22,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       4       2  avgt   10         312,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       4       3  avgt   10        2413,548 ±     38,141   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       4       3  avgt   10         232,302 ±      3,650  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       4       3  avgt   10   587868550,933 ±   1786,744    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       4       3  avgt   10          28,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       4       3  avgt   10        1213,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       5       1  avgt   10          24,082 ±      4,877   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       5       1  avgt   10         259,838 ±     41,383  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       5       1  avgt   10     6478861,530 ±     28,054    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       5       1  avgt   10         450,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       5       1  avgt   10         272,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       5       2  avgt   10          31,397 ±      8,021   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       5       2  avgt   10         220,291 ±     49,113  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       5       2  avgt   10     7091610,594 ±     42,693    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       5       2  avgt   10         144,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       5       2  avgt   10         410,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       5       3  avgt   10        4161,243 ±    204,026   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       5       3  avgt   10         204,722 ±     10,295  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       5       3  avgt   10   892434483,200 ±   8116,541    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       5       3  avgt   10          27,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       5       3  avgt   10        1554,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       6       1  avgt   10          24,202 ±      0,255   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       6       1  avgt   10         278,087 ±      2,944  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       6       1  avgt   10     7057318,396 ±     28,069    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       6       1  avgt   10         481,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       6       1  avgt   10         309,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       6       2  avgt   10          29,567 ±      1,241   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       6       2  avgt   10         249,197 ±     10,312  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       6       2  avgt   10     7721128,518 ±    147,825    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       6       2  avgt   10          22,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       6       2  avgt   10         329,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       6       3  avgt   10        6138,040 ±    973,185   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       6       3  avgt   10         202,338 ±     28,513  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       6       3  avgt   10  1290939224,000 ± 167021,527    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       6       3  avgt   10          22,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       6       3  avgt   10        1384,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       7       1  avgt   10          26,664 ±      0,929   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       7       1  avgt   10         271,779 ±      9,285  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       7       1  avgt   10     7595569,033 ±    216,647    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       7       1  avgt   10         471,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       7       1  avgt   10         291,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       7       2  avgt   10          31,651 ±      1,429   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       7       2  avgt   10         250,446 ±     11,324  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       7       2  avgt   10     8305543,096 ±     35,445    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       7       2  avgt   10          33,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       7       2  avgt   10         403,000                   ms
LazyGraphTraversalBenchmark.findMethods                                  2       7       3  avgt   10        8215,268 ±     87,240   ms/op
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate                   2       7       3  avgt   10         207,710 ±      2,212  MB/sec
LazyGraphTraversalBenchmark.findMethods:·gc.alloc.rate.norm              2       7       3  avgt   10  1789261397,600 ±  91335,576    B/op
LazyGraphTraversalBenchmark.findMethods:·gc.count                        2       7       3  avgt   10          25,000               counts
LazyGraphTraversalBenchmark.findMethods:·gc.time                         2       7       3  avgt   10        1901,000                   ms

Benchmark result is saved to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\results\jmh\results.txt

Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/8.2/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD SUCCESSFUL in 1h 15m 31s
11 actionable tasks: 6 executed, 5 up-to-date

Path for java installation 'C:\Users\User\.jdks\corretto-17.0.10' (IntelliJ IDEA) does not contain a java executable
> Task :codegenerator:checkKotlinGradlePluginConfigurationErrors
> Task :common:compileJava UP-TO-DATE
> Task :common:processResources NO-SOURCE
> Task :common:classes UP-TO-DATE
> Task :common:jar
> Task :codegenerator:processResources NO-SOURCE
> Task :codegenerator:processTestResources
> Task :codegenerator:processJmhResources NO-SOURCE
> Task :codegenerator:compileKotlin
> Task :codegenerator:compileJava
> Task :codegenerator:classes
> Task :codegenerator:compileTestKotlin NO-SOURCE
> Task :codegenerator:compileTestJava UP-TO-DATE
> Task :codegenerator:testClasses
> Task :codegenerator:compileJmhKotlin NO-SOURCE
> Task :codegenerator:compileJmhJava NO-SOURCE
> Task :codegenerator:jmhClasses UP-TO-DATE

> Task :codegenerator:jmhRunBytecodeGenerator
Processing 0 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\java\jmh with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources
Processing 0 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\kotlin\jmh with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources
Processing 88 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\java\test with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources
Processing 0 classes from C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\classes\kotlin\test with "reflection" generator
Writing out Java source to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-sources and resources to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\jmh-generated-resources

> Task :codegenerator:jmhCompileGeneratedClasses UP-TO-DATE
> Task :codegenerator:jmhJar

> Task :codegenerator:jmh
# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 1)

# Run progress: 0,00% complete, ETA 00:05:50
# Fork: 1 of 1
# Warmup Iteration   1: 2,717 ms/op
# Warmup Iteration   2: 1,971 ms/op
# Warmup Iteration   3: 1,914 ms/op
# Warmup Iteration   4: 1,696 ms/op
# Warmup Iteration   5: 1,830 ms/op
Iteration   1: 1,448 ms/op
                 �gc.alloc.rate:      212,208 MB/sec
                 �gc.alloc.rate.norm: 329258,495 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            54,000 ms

Iteration   2: 1,399 ms/op
                 �gc.alloc.rate:      220,281 MB/sec
                 �gc.alloc.rate.norm: 329042,435 B/op
                 �gc.count:           6,000 counts
                 �gc.time:            102,000 ms

Iteration   3: 1,400 ms/op
                 �gc.alloc.rate:      220,600 MB/sec
                 �gc.alloc.rate.norm: 329223,263 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            16,000 ms

Iteration   4: 1,380 ms/op
                 �gc.alloc.rate:      223,459 MB/sec
                 �gc.alloc.rate.norm: 329038,830 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            59,000 ms

Iteration   5: 1,416 ms/op
                 �gc.alloc.rate:      217,683 MB/sec
                 �gc.alloc.rate.norm: 329128,158 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            71,000 ms

Iteration   6: 1,405 ms/op
                 �gc.alloc.rate:      217,262 MB/sec
                 �gc.alloc.rate.norm: 329142,817 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            83,000 ms

Iteration   7: 1,425 ms/op
                 �gc.alloc.rate:      216,697 MB/sec
                 �gc.alloc.rate.norm: 329137,832 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            64,000 ms

Iteration   8: 1,364 ms/op
                 �gc.alloc.rate:      226,095 MB/sec
                 �gc.alloc.rate.norm: 328991,736 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            10,000 ms

Iteration   9: 1,393 ms/op
                 �gc.alloc.rate:      221,710 MB/sec
                 �gc.alloc.rate.norm: 329067,936 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            60,000 ms

Iteration  10: 1,517 ms/op
                 �gc.alloc.rate:      203,431 MB/sec
                 �gc.alloc.rate.norm: 329409,674 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            72,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  1,415 �(99.9%) 0,065 ms/op [Average]
  (min, avg, max) = (1,364, 1,415, 1,517), stdev = 0,043
  CI (99.9%): [1,350, 1,479] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  217,943 �(99.9%) 9,683 MB/sec [Average]
  (min, avg, max) = (203,431, 217,943, 226,095), stdev = 6,405
  CI (99.9%): [208,260, 227,625] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  329144,118 �(99.9%) 188,973 B/op [Average]
  (min, avg, max) = (328991,736, 329144,118, 329409,674), stdev = 124,994
  CI (99.9%): [328955,145, 329333,091] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  30,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 3,000, 6,000), stdev = 1,414
  CI (99.9%): [30,000, 30,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  591,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10,000, 59,100, 102,000), stdev = 27,966
  CI (99.9%): [591,000, 591,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 2)

# Run progress: 14,29% complete, ETA 00:05:18
# Fork: 1 of 1
# Warmup Iteration   1: 5,156 ms/op
# Warmup Iteration   2: 4,093 ms/op
# Warmup Iteration   3: 3,603 ms/op
# Warmup Iteration   4: 3,232 ms/op
# Warmup Iteration   5: 3,578 ms/op
Iteration   1: 2,917 ms/op
                 �gc.alloc.rate:      214,232 MB/sec
                 �gc.alloc.rate.norm: 668049,473 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            66,000 ms

Iteration   2: 2,892 ms/op
                 �gc.alloc.rate:      216,428 MB/sec
                 �gc.alloc.rate.norm: 667830,940 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            57,000 ms

Iteration   3: 2,876 ms/op
                 �gc.alloc.rate:      217,711 MB/sec
                 �gc.alloc.rate.norm: 668064,069 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            9,000 ms

Iteration   4: 2,846 ms/op
                 �gc.alloc.rate:      219,937 MB/sec
                 �gc.alloc.rate.norm: 667764,159 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            65,000 ms

Iteration   5: 2,840 ms/op
                 �gc.alloc.rate:      220,300 MB/sec
                 �gc.alloc.rate.norm: 667757,706 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            63,000 ms

Iteration   6: 2,927 ms/op
                 �gc.alloc.rate:      211,891 MB/sec
                 �gc.alloc.rate.norm: 668056,502 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            71,000 ms

Iteration   7: 2,904 ms/op
                 �gc.alloc.rate:      215,596 MB/sec
                 �gc.alloc.rate.norm: 667916,194 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            13,000 ms

Iteration   8: 2,835 ms/op
                 �gc.alloc.rate:      220,802 MB/sec
                 �gc.alloc.rate.norm: 667725,580 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            81,000 ms

Iteration   9: 2,953 ms/op
                 �gc.alloc.rate:      212,064 MB/sec
                 �gc.alloc.rate.norm: 668062,914 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            80,000 ms

Iteration  10: 2,921 ms/op
                 �gc.alloc.rate:      214,249 MB/sec
                 �gc.alloc.rate.norm: 667957,025 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            15,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  2,891 �(99.9%) 0,061 ms/op [Average]
  (min, avg, max) = (2,835, 2,891, 2,953), stdev = 0,040
  CI (99.9%): [2,830, 2,952] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  216,321 �(99.9%) 4,985 MB/sec [Average]
  (min, avg, max) = (211,891, 216,321, 220,802), stdev = 3,297
  CI (99.9%): [211,336, 221,306] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  667918,456 �(99.9%) 210,393 B/op [Average]
  (min, avg, max) = (667725,580, 667918,456, 668064,069), stdev = 139,162
  CI (99.9%): [667708,063, 668128,849] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  23,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,300, 4,000), stdev = 1,059
  CI (99.9%): [23,000, 23,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  520,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9,000, 52,000, 81,000), stdev = 28,355
  CI (99.9%): [520,000, 520,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 3)

# Run progress: 28,57% complete, ETA 00:04:25
# Fork: 1 of 1
# Warmup Iteration   1: 8,106 ms/op
# Warmup Iteration   2: 7,163 ms/op
# Warmup Iteration   3: 5,257 ms/op
# Warmup Iteration   4: 5,200 ms/op
# Warmup Iteration   5: 4,955 ms/op
Iteration   1: 4,985 ms/op
                 �gc.alloc.rate:      219,216 MB/sec
                 �gc.alloc.rate.norm: 1169428,432 B/op
                 �gc.count:           5,000 counts
                 �gc.time:            67,000 ms

Iteration   2: 5,062 ms/op
                 �gc.alloc.rate:      216,267 MB/sec
                 �gc.alloc.rate.norm: 1169645,401 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            67,000 ms

Iteration   3: 5,074 ms/op
                 �gc.alloc.rate:      215,831 MB/sec
                 �gc.alloc.rate.norm: 1170023,626 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            54,000 ms

Iteration   4: 5,055 ms/op
                 �gc.alloc.rate:      216,268 MB/sec
                 �gc.alloc.rate.norm: 1169534,319 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            63,000 ms

Iteration   5: 5,060 ms/op
                 �gc.alloc.rate:      216,513 MB/sec
                 �gc.alloc.rate.norm: 1169565,115 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            73,000 ms

Iteration   6: 5,055 ms/op
                 �gc.alloc.rate:      214,375 MB/sec
                 �gc.alloc.rate.norm: 1169617,735 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            89,000 ms

Iteration   7: 4,986 ms/op
                 �gc.alloc.rate:      219,604 MB/sec
                 �gc.alloc.rate.norm: 1169310,336 B/op
                 �gc.count:           ? 0 counts

Iteration   8: 4,884 ms/op
                 �gc.alloc.rate:      224,275 MB/sec
                 �gc.alloc.rate.norm: 1169025,366 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            77,000 ms

Iteration   9: 4,894 ms/op
                 �gc.alloc.rate:      223,704 MB/sec
                 �gc.alloc.rate.norm: 1169025,220 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            65,000 ms

Iteration  10: 4,974 ms/op
                 �gc.alloc.rate:      219,410 MB/sec
                 �gc.alloc.rate.norm: 1169230,644 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            65,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  5,003 �(99.9%) 0,106 ms/op [Average]
  (min, avg, max) = (4,884, 5,003, 5,074), stdev = 0,070
  CI (99.9%): [4,896, 5,109] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  218,546 �(99.9%) 5,065 MB/sec [Average]
  (min, avg, max) = (214,375, 218,546, 224,275), stdev = 3,350
  CI (99.9%): [213,481, 223,612] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  1169440,619 �(99.9%) 462,892 B/op [Average]
  (min, avg, max) = (1169025,220, 1169440,619, 1170023,626), stdev = 306,175
  CI (99.9%): [1168977,727, 1169903,512] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  27,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (? 0, 2,700, 5,000), stdev = 1,337
  CI (99.9%): [27,000, 27,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  620,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (? 0, 62,000, 89,000), stdev = 23,692
  CI (99.9%): [620,000, 620,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 4)

# Run progress: 42,86% complete, ETA 00:03:32
# Fork: 1 of 1
# Warmup Iteration   1: 12,709 ms/op
# Warmup Iteration   2: 9,834 ms/op
# Warmup Iteration   3: 8,298 ms/op
# Warmup Iteration   4: 7,829 ms/op
# Warmup Iteration   5: 7,908 ms/op
Iteration   1: 7,799 ms/op
                 �gc.alloc.rate:      221,424 MB/sec
                 �gc.alloc.rate.norm: 1849071,689 B/op
                 �gc.count:           5,000 counts
                 �gc.time:            68,000 ms

Iteration   2: 7,755 ms/op
                 �gc.alloc.rate:      222,579 MB/sec
                 �gc.alloc.rate.norm: 1848849,900 B/op
                 �gc.count:           5,000 counts
                 �gc.time:            77,000 ms

Iteration   3: 7,925 ms/op
                 �gc.alloc.rate:      218,459 MB/sec
                 �gc.alloc.rate.norm: 1849910,448 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            71,000 ms

Iteration   4: 7,881 ms/op
                 �gc.alloc.rate:      219,731 MB/sec
                 �gc.alloc.rate.norm: 1849715,914 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            70,000 ms

Iteration   5: 8,206 ms/op
                 �gc.alloc.rate:      211,225 MB/sec
                 �gc.alloc.rate.norm: 1850429,404 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            81,000 ms

Iteration   6: 7,724 ms/op
                 �gc.alloc.rate:      221,992 MB/sec
                 �gc.alloc.rate.norm: 1849151,229 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            9,000 ms

Iteration   7: 7,868 ms/op
                 �gc.alloc.rate:      220,563 MB/sec
                 �gc.alloc.rate.norm: 1849336,487 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            112,000 ms

Iteration   8: 8,045 ms/op
                 �gc.alloc.rate:      215,076 MB/sec
                 �gc.alloc.rate.norm: 1849822,490 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            84,000 ms

Iteration   9: 7,999 ms/op
                 �gc.alloc.rate:      216,776 MB/sec
                 �gc.alloc.rate.norm: 1849609,880 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            11,000 ms

Iteration  10: 7,777 ms/op
                 �gc.alloc.rate:      223,010 MB/sec
                 �gc.alloc.rate.norm: 1848984,372 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            75,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  7,898 �(99.9%) 0,228 ms/op [Average]
  (min, avg, max) = (7,724, 7,898, 8,206), stdev = 0,151
  CI (99.9%): [7,670, 8,126] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  219,084 �(99.9%) 5,695 MB/sec [Average]
  (min, avg, max) = (211,225, 219,084, 223,010), stdev = 3,767
  CI (99.9%): [213,388, 224,779] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  1849488,181 �(99.9%) 749,837 B/op [Average]
  (min, avg, max) = (1848849,900, 1849488,181, 1850429,404), stdev = 495,971
  CI (99.9%): [1848738,344, 1850238,019] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  32,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 3,200, 5,000), stdev = 1,476
  CI (99.9%): [32,000, 32,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  658,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9,000, 65,800, 112,000), stdev = 31,947
  CI (99.9%): [658,000, 658,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 5)

# Run progress: 57,14% complete, ETA 00:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 18,309 ms/op
# Warmup Iteration   2: 14,998 ms/op
# Warmup Iteration   3: 12,235 ms/op
# Warmup Iteration   4: 11,588 ms/op
# Warmup Iteration   5: 11,714 ms/op
Iteration   1: 11,499 ms/op
                 �gc.alloc.rate:      222,614 MB/sec
                 �gc.alloc.rate.norm: 2744364,046 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            70,000 ms

Iteration   2: 12,578 ms/op
                 �gc.alloc.rate:      204,374 MB/sec
                 �gc.alloc.rate.norm: 2746716,013 B/op
                 �gc.count:           4,000 counts
                 �gc.time:            69,000 ms

Iteration   3: 11,584 ms/op
                 �gc.alloc.rate:      221,736 MB/sec
                 �gc.alloc.rate.norm: 2744885,410 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            62,000 ms

Iteration   4: 11,605 ms/op
                 �gc.alloc.rate:      221,432 MB/sec
                 �gc.alloc.rate.norm: 2743953,850 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            67,000 ms

Iteration   5: 11,438 ms/op
                 �gc.alloc.rate:      224,620 MB/sec
                 �gc.alloc.rate.norm: 2743488,957 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            10,000 ms

Iteration   6: 11,457 ms/op
                 �gc.alloc.rate:      221,700 MB/sec
                 �gc.alloc.rate.norm: 2743882,743 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            97,000 ms

Iteration   7: 11,789 ms/op
                 �gc.alloc.rate:      217,743 MB/sec
                 �gc.alloc.rate.norm: 2744367,742 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            67,000 ms

Iteration   8: 13,314 ms/op
                 �gc.alloc.rate:      193,074 MB/sec
                 �gc.alloc.rate.norm: 2748476,120 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            80,000 ms

Iteration   9: 11,640 ms/op
                 �gc.alloc.rate:      220,810 MB/sec
                 �gc.alloc.rate.norm: 2743731,664 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            12,000 ms

Iteration  10: 11,571 ms/op
                 �gc.alloc.rate:      222,215 MB/sec
                 �gc.alloc.rate.norm: 2743476,334 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            73,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  11,848 �(99.9%) 0,926 ms/op [Average]
  (min, avg, max) = (11,438, 11,848, 13,314), stdev = 0,613
  CI (99.9%): [10,921, 12,774] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  217,032 �(99.9%) 15,351 MB/sec [Average]
  (min, avg, max) = (193,074, 217,032, 224,620), stdev = 10,153
  CI (99.9%): [201,681, 232,382] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  2744734,288 �(99.9%) 2453,145 B/op [Average]
  (min, avg, max) = (2743476,334, 2744734,288, 2748476,120), stdev = 1622,603
  CI (99.9%): [2742281,143, 2747187,432] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  26,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,600, 4,000), stdev = 1,075
  CI (99.9%): [26,000, 26,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  607,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10,000, 60,700, 97,000), stdev = 27,929
  CI (99.9%): [607,000, 607,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 6)

# Run progress: 71,43% complete, ETA 00:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 25,255 ms/op
# Warmup Iteration   2: 20,857 ms/op
# Warmup Iteration   3: 16,789 ms/op
# Warmup Iteration   4: 16,037 ms/op
# Warmup Iteration   5: 15,503 ms/op
Iteration   1: 15,841 ms/op
                 �gc.alloc.rate:      231,039 MB/sec
                 �gc.alloc.rate.norm: 3921528,158 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            59,000 ms

Iteration   2: 16,010 ms/op
                 �gc.alloc.rate:      229,025 MB/sec
                 �gc.alloc.rate.norm: 3919848,924 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            68,000 ms

Iteration   3: 16,736 ms/op
                 �gc.alloc.rate:      219,246 MB/sec
                 �gc.alloc.rate.norm: 3922906,433 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            68,000 ms

Iteration   4: 16,120 ms/op
                 �gc.alloc.rate:      227,668 MB/sec
                 �gc.alloc.rate.norm: 3919931,952 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            73,000 ms

Iteration   5: 15,701 ms/op
                 �gc.alloc.rate:      233,683 MB/sec
                 �gc.alloc.rate.norm: 3918695,656 B/op
                 �gc.count:           ? 0 counts

Iteration   6: 15,711 ms/op
                 �gc.alloc.rate:      235,838 MB/sec
                 �gc.alloc.rate.norm: 4012871,469 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            102,000 ms

Iteration   7: 15,561 ms/op
                 �gc.alloc.rate:      235,441 MB/sec
                 �gc.alloc.rate.norm: 3918369,147 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            63,000 ms

Iteration   8: 16,099 ms/op
                 �gc.alloc.rate:      226,876 MB/sec
                 �gc.alloc.rate.norm: 3919604,948 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            78,000 ms

Iteration   9: 16,080 ms/op
                 �gc.alloc.rate:      228,809 MB/sec
                 �gc.alloc.rate.norm: 3919660,305 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            14,000 ms

Iteration  10: 15,617 ms/op
                 �gc.alloc.rate:      235,155 MB/sec
                 �gc.alloc.rate.norm: 3918125,852 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            72,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  15,948 �(99.9%) 0,524 ms/op [Average]
  (min, avg, max) = (15,561, 15,948, 16,736), stdev = 0,347
  CI (99.9%): [15,423, 16,472] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  230,278 �(99.9%) 7,764 MB/sec [Average]
  (min, avg, max) = (219,246, 230,278, 235,838), stdev = 5,135
  CI (99.9%): [222,514, 238,042] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  3929154,284 �(99.9%) 44525,147 B/op [Average]
  (min, avg, max) = (3918125,852, 3929154,284, 4012871,469), stdev = 29450,628
  CI (99.9%): [3884629,137, 3973679,432] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  23,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (? 0, 2,300, 3,000), stdev = 1,059
  CI (99.9%): [23,000, 23,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  597,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (? 0, 59,700, 102,000), stdev = 30,284
  CI (99.9%): [597,000, 597,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_412, OpenJDK 64-Bit Server VM, 25.412-b08
# VM invoker: C:\Users\User\.jdks\corretto-1.8.0_412\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\tmp\jmh -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 2 s each
# Measurement: 10 iterations, 4 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.codegenerator.SearchMethodsPOJOBenchmark.findMethods
# Parameters: (countField = 7)

# Run progress: 85,71% complete, ETA 00:00:53
# Fork: 1 of 1
# Warmup Iteration   1: 34,107 ms/op
# Warmup Iteration   2: 27,574 ms/op
# Warmup Iteration   3: 21,492 ms/op
# Warmup Iteration   4: 21,143 ms/op
# Warmup Iteration   5: 20,818 ms/op
Iteration   1: 20,814 ms/op
                 �gc.alloc.rate:      249,423 MB/sec
                 �gc.alloc.rate.norm: 5559153,368 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            55,000 ms

Iteration   2: 20,971 ms/op
                 �gc.alloc.rate:      247,993 MB/sec
                 �gc.alloc.rate.norm: 5558303,500 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            58,000 ms

Iteration   3: 21,082 ms/op
                 �gc.alloc.rate:      246,870 MB/sec
                 �gc.alloc.rate.norm: 5559336,963 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            64,000 ms

Iteration   4: 20,854 ms/op
                 �gc.alloc.rate:      248,868 MB/sec
                 �gc.alloc.rate.norm: 5557054,301 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            69,000 ms

Iteration   5: 20,728 ms/op
                 �gc.alloc.rate:      251,044 MB/sec
                 �gc.alloc.rate.norm: 5556728,990 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            63,000 ms

Iteration   6: 21,208 ms/op
                 �gc.alloc.rate:      242,810 MB/sec
                 �gc.alloc.rate.norm: 5558892,783 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            73,000 ms

Iteration   7: 20,774 ms/op
                 �gc.alloc.rate:      250,301 MB/sec
                 �gc.alloc.rate.norm: 5557036,518 B/op
                 �gc.count:           1,000 counts
                 �gc.time:            10,000 ms

Iteration   8: 21,122 ms/op
                 �gc.alloc.rate:      246,505 MB/sec
                 �gc.alloc.rate.norm: 5557667,560 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            99,000 ms

Iteration   9: 21,372 ms/op
                 �gc.alloc.rate:      243,536 MB/sec
                 �gc.alloc.rate.norm: 5558618,809 B/op
                 �gc.count:           2,000 counts
                 �gc.time:            69,000 ms

Iteration  10: 22,151 ms/op
                 �gc.alloc.rate:      235,336 MB/sec
                 �gc.alloc.rate.norm: 5560626,066 B/op
                 �gc.count:           3,000 counts
                 �gc.time:            88,000 ms



Result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods":
  21,108 �(99.9%) 0,636 ms/op [Average]
  (min, avg, max) = (20,728, 21,108, 22,151), stdev = 0,421
  CI (99.9%): [20,471, 21,744] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate":
  246,269 �(99.9%) 7,093 MB/sec [Average]
  (min, avg, max) = (235,336, 246,269, 251,044), stdev = 4,692
  CI (99.9%): [239,175, 253,362] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.alloc.rate.norm":
  5558341,886 �(99.9%) 1862,976 B/op [Average]
  (min, avg, max) = (5556728,990, 5558341,886, 5560626,066), stdev = 1232,244
  CI (99.9%): [5556478,909, 5560204,862] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.count":
  26,000 �(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (1,000, 2,600, 3,000), stdev = 0,699
  CI (99.9%): [26,000, 26,000] (assumes normal distribution)

Secondary result "org.codegenerator.SearchMethodsPOJOBenchmark.findMethods:�gc.time":
  648,000 �(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10,000, 64,800, 99,000), stdev = 23,475
  CI (99.9%): [648,000, 648,000] (assumes normal distribution)


# Run complete. Total time: 00:06:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               (countField)  Mode  Cnt        Score       Error   Units
SearchMethodsBenchmark.findMethods                                 1  avgt   10        1,415 �     0,065   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  1  avgt   10      217,943 �     9,683  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             1  avgt   10   329144,118 �   188,973    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       1  avgt   10       30,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        1  avgt   10      591,000                  ms
SearchMethodsBenchmark.findMethods                                 2  avgt   10        2,891 �     0,061   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  2  avgt   10      216,321 �     4,985  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             2  avgt   10   667918,456 �   210,393    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       2  avgt   10       23,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        2  avgt   10      520,000                  ms
SearchMethodsBenchmark.findMethods                                 3  avgt   10        5,003 �     0,106   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  3  avgt   10      218,546 �     5,065  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             3  avgt   10  1169440,619 �   462,892    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       3  avgt   10       27,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        3  avgt   10      620,000                  ms
SearchMethodsBenchmark.findMethods                                 4  avgt   10        7,898 �     0,228   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  4  avgt   10      219,084 �     5,695  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             4  avgt   10  1849488,181 �   749,837    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       4  avgt   10       32,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        4  avgt   10      658,000                  ms
SearchMethodsBenchmark.findMethods                                 5  avgt   10       11,848 �     0,926   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  5  avgt   10      217,032 �    15,351  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             5  avgt   10  2744734,288 �  2453,145    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       5  avgt   10       26,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        5  avgt   10      607,000                  ms
SearchMethodsBenchmark.findMethods                                 6  avgt   10       15,948 �     0,524   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  6  avgt   10      230,278 �     7,764  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             6  avgt   10  3929154,284 � 44525,147    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       6  avgt   10       23,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        6  avgt   10      597,000                  ms
SearchMethodsBenchmark.findMethods                                 7  avgt   10       21,108 �     0,636   ms/op
SearchMethodsBenchmark.findMethods:�gc.alloc.rate                  7  avgt   10      246,269 �     7,093  MB/sec
SearchMethodsBenchmark.findMethods:�gc.alloc.rate.norm             7  avgt   10  5558341,886 �  1862,976    B/op
SearchMethodsBenchmark.findMethods:�gc.count                       7  avgt   10       26,000              counts
SearchMethodsBenchmark.findMethods:�gc.time                        7  avgt   10      648,000                  ms

Benchmark result is saved to C:\Users\User\Desktop\project\CodeGenerator\codegenerator\build\results\jmh\results.txt

Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/8.2/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD SUCCESSFUL in 6m 23s
11 actionable tasks: 8 executed, 3 up-to-date
